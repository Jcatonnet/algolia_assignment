{"mappings":"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","sources":["packages/@react-spectrum/list/src/ListView.tsx"],"sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaGridListProps, useGridList} from '@react-aria/gridlist';\nimport {AsyncLoadable, DOMRef, Key, LoadingState, SpectrumSelectionProps, StyleProps} from '@react-types/shared';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport type {DragAndDropHooks} from '@react-spectrum/dnd';\nimport type {DraggableCollectionState, DroppableCollectionState} from '@react-stately/dnd';\nimport type {DroppableCollectionResult} from '@react-aria/dnd';\nimport {filterDOMProps, mergeProps, useLayoutEffect} from '@react-aria/utils';\nimport {FocusRing, FocusScope} from '@react-aria/focus';\nimport InsertionIndicator from './InsertionIndicator';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {ListLayout} from '@react-stately/layout';\nimport {ListState, useListState} from '@react-stately/list';\nimport listStyles from './styles.css';\nimport {ListViewItem} from './ListViewItem';\nimport {ProgressCircle} from '@react-spectrum/progress';\nimport React, {JSX, ReactElement, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport RootDropIndicator from './RootDropIndicator';\nimport {DragPreview as SpectrumDragPreview} from './DragPreview';\nimport {useCollator, useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProvider} from '@react-spectrum/provider';\nimport {Virtualizer} from '@react-aria/virtualizer';\n\nexport interface SpectrumListViewProps<T> extends AriaGridListProps<T>, StyleProps, SpectrumSelectionProps, Omit<AsyncLoadable, 'isLoading'> {\n  /**\n   * Sets the amount of vertical padding within each cell.\n   * @default 'regular'\n   */\n  density?: 'compact' | 'regular' | 'spacious',\n  /** Whether the ListView should be displayed with a quiet style. */\n  isQuiet?: boolean,\n  /** The current loading state of the ListView. Determines whether or not the progress circle should be shown. */\n  loadingState?: LoadingState,\n  /**\n   * Sets the text behavior for the row contents.\n   * @default 'truncate'\n   */\n  overflowMode?: 'truncate' | 'wrap',\n  /** Sets what the ListView should render when there is no content to display. */\n  renderEmptyState?: () => JSX.Element,\n  /**\n   * Handler that is called when a user performs an action on an item. The exact user event depends on\n   * the collection's `selectionStyle` prop and the interaction modality.\n   */\n  onAction?: (key: Key) => void,\n  /**\n   * The drag and drop hooks returned by `useDragAndDrop` used to enable drag and drop behavior for the ListView.\n   */\n  dragAndDropHooks?: DragAndDropHooks['dragAndDropHooks']\n}\n\ninterface ListViewContextValue<T> {\n  state: ListState<T>,\n  dragState: DraggableCollectionState,\n  dropState: DroppableCollectionState,\n  dragAndDropHooks: DragAndDropHooks['dragAndDropHooks'],\n  onAction:(key: Key) => void,\n  isListDraggable: boolean,\n  isListDroppable: boolean,\n  layout: ListLayout<T>,\n  loadingState: LoadingState\n}\n\nexport const ListViewContext = React.createContext<ListViewContextValue<unknown>>(null);\n\nconst ROW_HEIGHTS = {\n  compact: {\n    medium: 32,\n    large: 40\n  },\n  regular: {\n    medium: 40,\n    large: 50\n  },\n  spacious: {\n    medium: 48,\n    large: 60\n  }\n};\n\nfunction useListLayout<T>(state: ListState<T>, density: SpectrumListViewProps<T>['density'], overflowMode: SpectrumListViewProps<T>['overflowMode']) {\n  let {scale} = useProvider();\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let isEmpty = state.collection.size === 0;\n  let layout = useMemo(() =>\n    new ListLayout<T>({\n      estimatedRowHeight: ROW_HEIGHTS[density][scale],\n      padding: 0,\n      collator,\n      loaderHeight: isEmpty ? null : ROW_HEIGHTS[density][scale]\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    , [collator, scale, density, isEmpty, overflowMode]);\n\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n  return layout;\n}\n\nfunction ListView<T extends object>(props: SpectrumListViewProps<T>, ref: DOMRef<HTMLDivElement>) {\n  let {\n    density = 'regular',\n    loadingState,\n    onLoadMore,\n    isQuiet,\n    overflowMode = 'truncate',\n    onAction,\n    dragAndDropHooks,\n    ...otherProps\n  } = props;\n  let isListDraggable = !!dragAndDropHooks?.useDraggableCollectionState;\n  let isListDroppable = !!dragAndDropHooks?.useDroppableCollectionState;\n  let dragHooksProvided = useRef(isListDraggable);\n  let dropHooksProvided = useRef(isListDroppable);\n  useEffect(() => {\n    if (dragHooksProvided.current !== isListDraggable) {\n      console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n    if (dropHooksProvided.current !== isListDroppable) {\n      console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n  }, [isListDraggable, isListDroppable]);\n\n  let domRef = useDOMRef(ref);\n  let state = useListState({\n    ...props,\n    selectionBehavior: props.selectionStyle === 'highlight' ? 'replace' : 'toggle'\n  });\n  let {collection, selectionManager} = state;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/list');\n  let isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n\n  let {styleProps} = useStyleProps(props);\n  let dragState: DraggableCollectionState;\n  let preview = useRef(null);\n  if (isListDraggable) {\n    dragState = dragAndDropHooks.useDraggableCollectionState({\n      collection,\n      selectionManager,\n      preview\n    });\n    dragAndDropHooks.useDraggableCollection({}, dragState, domRef);\n  }\n  let layout = useListLayout(\n    state,\n    props.density || 'regular',\n    overflowMode\n  );\n  // !!0 is false, so we can cast size or undefined and they'll be falsy\n  layout.allowDisabledKeyFocus = state.selectionManager.disabledBehavior === 'selection' || !!dragState?.draggingKeys.size;\n\n\n  let DragPreview = dragAndDropHooks?.DragPreview;\n  let dropState: DroppableCollectionState;\n  let droppableCollection: DroppableCollectionResult;\n  let isRootDropTarget: boolean;\n  if (isListDroppable) {\n    dropState = dragAndDropHooks.useDroppableCollectionState({\n      collection,\n      selectionManager\n    });\n    droppableCollection = dragAndDropHooks.useDroppableCollection({\n      keyboardDelegate: layout,\n      dropTargetDelegate: layout\n    }, dropState, domRef);\n\n    isRootDropTarget = dropState.isDropTarget({type: 'root'});\n  }\n\n  let {gridProps} = useGridList({\n    ...props,\n    isVirtualized: true,\n    keyboardDelegate: layout,\n    onAction\n  }, state, domRef);\n\n  // Sync loading state into the layout.\n  layout.isLoading = isLoading;\n\n  let focusedKey = selectionManager.focusedKey;\n  if (dropState?.target?.type === 'item') {\n    focusedKey = dropState.target.key;\n  }\n\n  // wait for layout to get accurate measurements\n  let [isVerticalScrollbarVisible, setVerticalScollbarVisible] = useState(false);\n  let [isHorizontalScrollbarVisible, setHorizontalScollbarVisible] = useState(false);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(() => {\n    if (domRef.current) {\n      // 2 is the width of the border which is not part of the box size\n      setVerticalScollbarVisible(domRef.current.clientWidth + 2 < domRef.current.offsetWidth);\n      setHorizontalScollbarVisible(domRef.current.clientHeight + 2 < domRef.current.offsetHeight);\n    }\n  });\n\n  let hasAnyChildren = useMemo(() => [...collection].some(item => item.hasChildNodes), [collection]);\n\n  return (\n    <ListViewContext.Provider value={{state, dragState, dropState, dragAndDropHooks, onAction, isListDraggable, isListDroppable, layout, loadingState}}>\n      <FocusScope>\n        <FocusRing focusRingClass={classNames(listStyles, 'focus-ring')}>\n          <Virtualizer\n            {...mergeProps(isListDroppable && droppableCollection?.collectionProps, gridProps)}\n            {...filterDOMProps(otherProps)}\n            {...gridProps}\n            {...styleProps}\n            isLoading={isLoading}\n            onLoadMore={onLoadMore}\n            ref={domRef}\n            focusedKey={focusedKey}\n            scrollDirection=\"vertical\"\n            className={\n              classNames(\n                listStyles,\n                'react-spectrum-ListView',\n                `react-spectrum-ListView--${density}`,\n                'react-spectrum-ListView--emphasized',\n                {\n                  'react-spectrum-ListView--quiet': isQuiet,\n                  'react-spectrum-ListView--loadingMore': loadingState === 'loadingMore',\n                  'react-spectrum-ListView--draggable': !!isListDraggable,\n                  'react-spectrum-ListView--dropTarget': !!isRootDropTarget,\n                  'react-spectrum-ListView--isVerticalScrollbarVisible': isVerticalScrollbarVisible,\n                  'react-spectrum-ListView--isHorizontalScrollbarVisible': isHorizontalScrollbarVisible,\n                  'react-spectrum-ListView--hasAnyChildren': hasAnyChildren,\n                  'react-spectrum-ListView--wrap': overflowMode === 'wrap'\n                },\n                styleProps.className\n              )\n            }\n            layout={layout}\n            collection={collection}\n            transitionDuration={isLoading ? 160 : 220}>\n            {(type, item) => {\n              if (type === 'item') {\n                return (\n                  <>\n                    {isListDroppable && collection.getKeyBefore(item.key) == null &&\n                      <RootDropIndicator key=\"root\" />\n                    }\n                    {isListDroppable &&\n                      <InsertionIndicator\n                        key={`${item.key}-before`}\n                        target={{key: item.key, type: 'item', dropPosition: 'before'}} />\n                    }\n                    <ListViewItem item={item} isEmphasized hasActions={!!onAction} />\n                    {isListDroppable &&\n                      <InsertionIndicator\n                        key={`${item.key}-after`}\n                        target={{key: item.key, type: 'item', dropPosition: 'after'}}\n                        isPresentationOnly={collection.getKeyAfter(item.key) != null} />\n                    }\n                  </>\n                );\n              } else if (type === 'loader') {\n                return (\n                  <CenteredWrapper>\n                    <ProgressCircle\n                      isIndeterminate\n                      aria-label={collection.size > 0 ? stringFormatter.format('loadingMore') : stringFormatter.format('loading')} />\n                  </CenteredWrapper>\n                );\n              } else if (type === 'placeholder') {\n                let emptyState = props.renderEmptyState ? props.renderEmptyState() : null;\n                if (emptyState == null) {\n                  return null;\n                }\n\n                return (\n                  <CenteredWrapper>\n                    {emptyState}\n                  </CenteredWrapper>\n                );\n              }\n\n            }}\n          </Virtualizer>\n        </FocusRing>\n      </FocusScope>\n      {DragPreview && isListDraggable &&\n        <DragPreview ref={preview}>\n          {() => {\n            if (dragAndDropHooks.renderPreview) {\n              return dragAndDropHooks.renderPreview(dragState.draggingKeys, dragState.draggedKey);\n            }\n            let item = state.collection.getItem(dragState.draggedKey);\n            let itemCount = dragState.draggingKeys.size;\n            let itemHeight = layout.getLayoutInfo(dragState.draggedKey).rect.height;\n            return <SpectrumDragPreview item={item} itemCount={itemCount} itemHeight={itemHeight} density={density}  />;\n          }}\n        </DragPreview>\n      }\n    </ListViewContext.Provider>\n  );\n}\n\nfunction CenteredWrapper({children}) {\n  let {state} = useContext(ListViewContext);\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={state.collection.size + 1}\n      className={\n        classNames(\n          listStyles,\n          'react-spectrum-ListView-centeredWrapper',\n          {\n            'react-spectrum-ListView-centeredWrapper--loadingMore': state.collection.size > 0\n          }\n        )}>\n      <div role=\"gridcell\">\n        {children}\n      </div>\n    </div>\n  );\n}\n\n/**\n * A ListView displays a list of interactive items, and allows a user to navigate, select, or perform an action.\n */\nconst _ListView = React.forwardRef(ListView) as <T>(props: SpectrumListViewProps<T> & {ref?: DOMRef<HTMLDivElement>}) => ReactElement;\nexport {_ListView as ListView};\n"],"names":[],"version":3,"file":"ListView.main.js.map"}