import {
  $11d87f3f76e88657$export$84c95a83c799e074,
  $11d87f3f76e88657$export$93522d1a439f3617,
  $11d87f3f76e88657$export$b21e0b124e224484,
  $11d87f3f76e88657$export$b4a036af3fc0b032,
  $11d87f3f76e88657$export$d33f79e3ffc3dc83,
  $14e0f24ef4ac5c92$export$2061056d06d7cdf7,
  $14e0f24ef4ac5c92$export$42c81a444fbfb5d4,
  $14e0f24ef4ac5c92$export$461939dd4422153,
  $14e0f24ef4ac5c92$export$5412ac11713b72ad,
  $14e0f24ef4ac5c92$export$5c333a116e949cdd,
  $14e0f24ef4ac5c92$export$91b62ebf2ba703ee,
  $14e0f24ef4ac5c92$export$a2258d9c4118825c,
  $14e0f24ef4ac5c92$export$a5a3b454ada2268e,
  $14e0f24ef4ac5c92$export$a75f2bff57811055,
  $14e0f24ef4ac5c92$export$aa8b41735afcabd2,
  $14e0f24ef4ac5c92$export$b2f4953d301981d5,
  $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3,
  $14e0f24ef4ac5c92$export$ea39ec197993aef0,
  $14e0f24ef4ac5c92$export$ef8b6d9133084f4e,
  $14e0f24ef4ac5c92$export$f91e89d3d0406102,
  $35ea8db9cb2ccb90$export$680ea196effce5f,
  $3b62074eb05584b2$export$80ee6245ec4f29ec,
  $458b0a5536c1a7cf$export$40bfa8c7b0832715,
  $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5,
  $5b160d28a433310d$export$c17fa47878dc55b6,
  $6c7bd7858deea686$export$cd11ab140839f11d,
  $6db58dc88e78b024$export$2f817fcdc4b89ae0,
  $7613b1592d41b092$export$6cd28814d92fa9c9,
  $9446cca9a3875146$export$7d15b64cf5a3a4c4,
  $9446cca9a3875146$export$cb6e0bb50bc19463,
  $c5a24bc478652b5f$export$1005530eda016c13,
  $c5a24bc478652b5f$export$7475b2c64539e4cf,
  $c5a24bc478652b5f$export$8c434b3a7a4dad6,
  $c5a24bc478652b5f$export$fbdeaa6a76694f71,
  $e5be200c675c3b3a$export$75ee7c75d68f5b0e,
  $e5be200c675c3b3a$export$aca958c65c314e6c,
  $e5be200c675c3b3a$export$fc1a364ae1f3ff10,
  $eb2240fc39a57fa5$export$bf788dd355e3a401,
  $f4e2df6bd15f8569$export$1b00cb14a96194e6,
  $fb18d541ea1ad717$export$ad991b66133851cf
} from "./chunk-SJMU4G3U.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@react-stately/calendar/dist/utils.mjs
function $f62d864046160412$export$eac50920cf2fd59a(date, minValue, maxValue) {
  return minValue != null && date.compare(minValue) < 0 || maxValue != null && date.compare(maxValue) > 0;
}
function $f62d864046160412$export$f4a51ff076cc9a09(date, duration, locale, minValue, maxValue) {
  let halfDuration = {};
  for (let key in duration) {
    halfDuration[key] = Math.floor(duration[key] / 2);
    if (halfDuration[key] > 0 && duration[key] % 2 === 0)
      halfDuration[key]--;
  }
  let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(halfDuration);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$144a00ba6044eb9(date, duration, locale, minValue, maxValue) {
  let aligned = date;
  if (duration.years)
    aligned = (0, $14e0f24ef4ac5c92$export$f91e89d3d0406102)(date);
  else if (duration.months)
    aligned = (0, $14e0f24ef4ac5c92$export$a5a3b454ada2268e)(date);
  else if (duration.weeks)
    aligned = (0, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(date, locale);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$530edbfc915b2b04(date, duration, locale, minValue, maxValue) {
  let d = {
    ...duration
  };
  if (duration.days)
    d.days--;
  else if (duration.weeks)
    d.weeks--;
  else if (duration.months)
    d.months--;
  else if (duration.years)
    d.years--;
  let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(d);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue) {
  if (minValue && date.compare(minValue) >= 0)
    aligned = (0, $14e0f24ef4ac5c92$export$a75f2bff57811055)(aligned, $f62d864046160412$export$144a00ba6044eb9((0, $11d87f3f76e88657$export$93522d1a439f3617)(minValue), duration, locale));
  if (maxValue && date.compare(maxValue) <= 0)
    aligned = (0, $14e0f24ef4ac5c92$export$5c333a116e949cdd)(aligned, $f62d864046160412$export$530edbfc915b2b04((0, $11d87f3f76e88657$export$93522d1a439f3617)(maxValue), duration, locale));
  return aligned;
}
function $f62d864046160412$export$4f5203c0d889109e(date, minValue, maxValue) {
  if (minValue)
    date = (0, $14e0f24ef4ac5c92$export$a75f2bff57811055)(date, (0, $11d87f3f76e88657$export$93522d1a439f3617)(minValue));
  if (maxValue)
    date = (0, $14e0f24ef4ac5c92$export$5c333a116e949cdd)(date, (0, $11d87f3f76e88657$export$93522d1a439f3617)(maxValue));
  return date;
}
function $f62d864046160412$export$a1d3911297b952d7(date, minValue, isDateUnavailable) {
  if (!isDateUnavailable)
    return date;
  while (date.compare(minValue) >= 0 && isDateUnavailable(date))
    date = date.subtract({
      days: 1
    });
  if (date.compare(minValue) >= 0)
    return date;
}

// node_modules/@react-stately/calendar/dist/useCalendarState.mjs
var import_react = __toESM(require_react(), 1);
function $131cf43a05231e1e$export$6d095e787d2b5e1f(props) {
  let defaultFormatter = (0, import_react.useMemo)(() => new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(props.locale), [
    props.locale
  ]);
  let resolvedOptions = (0, import_react.useMemo)(() => defaultFormatter.resolvedOptions(), [
    defaultFormatter
  ]);
  let { locale, createCalendar, visibleDuration = {
    months: 1
  }, minValue, maxValue, selectionAlignment, isDateUnavailable, pageBehavior = "visible" } = props;
  let calendar = (0, import_react.useMemo)(() => createCalendar(resolvedOptions.calendar), [
    createCalendar,
    resolvedOptions.calendar
  ]);
  let [value, setControlledValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue, props.onChange);
  let calendarDateValue = (0, import_react.useMemo)(() => value ? (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$93522d1a439f3617)(value), calendar) : null, [
    value,
    calendar
  ]);
  let timeZone = (0, import_react.useMemo)(() => value && "timeZone" in value ? value.timeZone : resolvedOptions.timeZone, [
    value,
    resolvedOptions.timeZone
  ]);
  let focusedCalendarDate = (0, import_react.useMemo)(() => props.focusedValue ? (0, $f62d864046160412$export$4f5203c0d889109e)((0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$93522d1a439f3617)(props.focusedValue), calendar), minValue, maxValue) : void 0, [
    props.focusedValue,
    calendar,
    minValue,
    maxValue
  ]);
  let defaultFocusedCalendarDate = (0, import_react.useMemo)(() => (0, $f62d864046160412$export$4f5203c0d889109e)(props.defaultFocusedValue ? (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$93522d1a439f3617)(props.defaultFocusedValue), calendar) : calendarDateValue || (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3)(timeZone), calendar), minValue, maxValue), [
    props.defaultFocusedValue,
    calendarDateValue,
    timeZone,
    calendar,
    minValue,
    maxValue
  ]);
  let [focusedDate, setFocusedDate] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(focusedCalendarDate, defaultFocusedCalendarDate, props.onFocusChange);
  let [startDate, setStartDate] = (0, import_react.useState)(() => {
    switch (selectionAlignment) {
      case "start":
        return (0, $f62d864046160412$export$144a00ba6044eb9)(focusedDate, visibleDuration, locale, minValue, maxValue);
      case "end":
        return (0, $f62d864046160412$export$530edbfc915b2b04)(focusedDate, visibleDuration, locale, minValue, maxValue);
      case "center":
      default:
        return (0, $f62d864046160412$export$f4a51ff076cc9a09)(focusedDate, visibleDuration, locale, minValue, maxValue);
    }
  });
  let [isFocused, setFocused] = (0, import_react.useState)(props.autoFocus || false);
  let endDate = (0, import_react.useMemo)(() => {
    let duration = {
      ...visibleDuration
    };
    if (duration.days)
      duration.days--;
    else
      duration.days = -1;
    return startDate.add(duration);
  }, [
    startDate,
    visibleDuration
  ]);
  let [lastCalendarIdentifier, setLastCalendarIdentifier] = (0, import_react.useState)(calendar.identifier);
  if (calendar.identifier !== lastCalendarIdentifier) {
    let newFocusedDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(focusedDate, calendar);
    setStartDate((0, $f62d864046160412$export$f4a51ff076cc9a09)(newFocusedDate, visibleDuration, locale, minValue, maxValue));
    setFocusedDate(newFocusedDate);
    setLastCalendarIdentifier(calendar.identifier);
  }
  if ((0, $f62d864046160412$export$eac50920cf2fd59a)(focusedDate, minValue, maxValue))
    setFocusedDate((0, $f62d864046160412$export$4f5203c0d889109e)(focusedDate, minValue, maxValue));
  else if (focusedDate.compare(startDate) < 0)
    setStartDate((0, $f62d864046160412$export$530edbfc915b2b04)(focusedDate, visibleDuration, locale, minValue, maxValue));
  else if (focusedDate.compare(endDate) > 0)
    setStartDate((0, $f62d864046160412$export$144a00ba6044eb9)(focusedDate, visibleDuration, locale, minValue, maxValue));
  function focusCell(date) {
    date = (0, $f62d864046160412$export$4f5203c0d889109e)(date, minValue, maxValue);
    setFocusedDate(date);
  }
  function setValue(newValue) {
    if (!props.isDisabled && !props.isReadOnly) {
      if (newValue === null) {
        setControlledValue(null);
        return;
      }
      newValue = (0, $f62d864046160412$export$4f5203c0d889109e)(newValue, minValue, maxValue);
      newValue = (0, $f62d864046160412$export$a1d3911297b952d7)(newValue, startDate, isDateUnavailable);
      if (!newValue)
        return;
      newValue = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(newValue, (value === null || value === void 0 ? void 0 : value.calendar) || new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
      if (value && "hour" in value)
        setControlledValue(value.set(newValue));
      else
        setControlledValue(newValue);
    }
  }
  let isUnavailable = (0, import_react.useMemo)(() => {
    if (!calendarDateValue)
      return false;
    if (isDateUnavailable && isDateUnavailable(calendarDateValue))
      return true;
    return (0, $f62d864046160412$export$eac50920cf2fd59a)(calendarDateValue, minValue, maxValue);
  }, [
    calendarDateValue,
    isDateUnavailable,
    minValue,
    maxValue
  ]);
  let isValueInvalid = props.isInvalid || props.validationState === "invalid" || isUnavailable;
  let validationState = isValueInvalid ? "invalid" : null;
  let pageDuration = (0, import_react.useMemo)(() => {
    if (pageBehavior === "visible")
      return visibleDuration;
    return $131cf43a05231e1e$var$unitDuration(visibleDuration);
  }, [
    pageBehavior,
    visibleDuration
  ]);
  return {
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    value: calendarDateValue,
    setValue,
    visibleRange: {
      start: startDate,
      end: endDate
    },
    minValue,
    maxValue,
    focusedDate,
    timeZone,
    validationState,
    isValueInvalid,
    setFocusedDate(date) {
      focusCell(date);
      setFocused(true);
    },
    focusNextDay() {
      focusCell(focusedDate.add({
        days: 1
      }));
    },
    focusPreviousDay() {
      focusCell(focusedDate.subtract({
        days: 1
      }));
    },
    focusNextRow() {
      if (visibleDuration.days)
        this.focusNextPage();
      else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.add({
          weeks: 1
        }));
    },
    focusPreviousRow() {
      if (visibleDuration.days)
        this.focusPreviousPage();
      else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.subtract({
          weeks: 1
        }));
    },
    focusNextPage() {
      let start = startDate.add(pageDuration);
      setFocusedDate((0, $f62d864046160412$export$4f5203c0d889109e)(focusedDate.add(pageDuration), minValue, maxValue));
      setStartDate((0, $f62d864046160412$export$144a00ba6044eb9)((0, $f62d864046160412$export$5bb865b12696a77d)(focusedDate, start, pageDuration, locale, minValue, maxValue), pageDuration, locale));
    },
    focusPreviousPage() {
      let start = startDate.subtract(pageDuration);
      setFocusedDate((0, $f62d864046160412$export$4f5203c0d889109e)(focusedDate.subtract(pageDuration), minValue, maxValue));
      setStartDate((0, $f62d864046160412$export$144a00ba6044eb9)((0, $f62d864046160412$export$5bb865b12696a77d)(focusedDate, start, pageDuration, locale, minValue, maxValue), pageDuration, locale));
    },
    focusSectionStart() {
      if (visibleDuration.days)
        focusCell(startDate);
      else if (visibleDuration.weeks)
        focusCell((0, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(focusedDate, locale));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell((0, $14e0f24ef4ac5c92$export$a5a3b454ada2268e)(focusedDate));
    },
    focusSectionEnd() {
      if (visibleDuration.days)
        focusCell(endDate);
      else if (visibleDuration.weeks)
        focusCell((0, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e)(focusedDate, locale));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell((0, $14e0f24ef4ac5c92$export$a2258d9c4118825c)(focusedDate));
    },
    focusNextSection(larger) {
      if (!larger && !visibleDuration.days) {
        focusCell(focusedDate.add($131cf43a05231e1e$var$unitDuration(visibleDuration)));
        return;
      }
      if (visibleDuration.days)
        this.focusNextPage();
      else if (visibleDuration.weeks)
        focusCell(focusedDate.add({
          months: 1
        }));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.add({
          years: 1
        }));
    },
    focusPreviousSection(larger) {
      if (!larger && !visibleDuration.days) {
        focusCell(focusedDate.subtract($131cf43a05231e1e$var$unitDuration(visibleDuration)));
        return;
      }
      if (visibleDuration.days)
        this.focusPreviousPage();
      else if (visibleDuration.weeks)
        focusCell(focusedDate.subtract({
          months: 1
        }));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.subtract({
          years: 1
        }));
    },
    selectFocusedDate() {
      setValue(focusedDate);
    },
    selectDate(date) {
      setValue(date);
    },
    isFocused,
    setFocused,
    isInvalid(date) {
      return (0, $f62d864046160412$export$eac50920cf2fd59a)(date, minValue, maxValue);
    },
    isSelected(date) {
      return calendarDateValue != null && (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, calendarDateValue) && !this.isCellDisabled(date) && !this.isCellUnavailable(date);
    },
    isCellFocused(date) {
      return isFocused && focusedDate && (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, focusedDate);
    },
    isCellDisabled(date) {
      return props.isDisabled || date.compare(startDate) < 0 || date.compare(endDate) > 0 || this.isInvalid(date, minValue, maxValue);
    },
    isCellUnavailable(date) {
      return props.isDateUnavailable && props.isDateUnavailable(date);
    },
    isPreviousVisibleRangeInvalid() {
      let prev = startDate.subtract({
        days: 1
      });
      return (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(prev, startDate) || this.isInvalid(prev, minValue, maxValue);
    },
    isNextVisibleRangeInvalid() {
      let next = endDate.add({
        days: 1
      });
      return (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(next, endDate) || this.isInvalid(next, minValue, maxValue);
    },
    getDatesInWeek(weekIndex, from = startDate) {
      let date = from.add({
        weeks: weekIndex
      });
      let dates = [];
      date = (0, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(date, locale);
      let dayOfWeek = (0, $14e0f24ef4ac5c92$export$2061056d06d7cdf7)(date, locale);
      for (let i = 0; i < dayOfWeek; i++)
        dates.push(null);
      while (dates.length < 7) {
        dates.push(date);
        let nextDate = date.add({
          days: 1
        });
        if ((0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, nextDate))
          break;
        date = nextDate;
      }
      while (dates.length < 7)
        dates.push(null);
      return dates;
    }
  };
}
function $131cf43a05231e1e$var$unitDuration(duration) {
  let unit = {
    ...duration
  };
  for (let key in duration)
    unit[key] = 1;
  return unit;
}

// node_modules/@react-stately/calendar/dist/useRangeCalendarState.mjs
var import_react2 = __toESM(require_react(), 1);
function $9a36b6ba2fb1a7c5$export$9a987164d97ecc90(props) {
  let { value: valueProp, defaultValue, onChange, createCalendar, locale, visibleDuration = {
    months: 1
  }, minValue, maxValue, ...calendarProps } = props;
  let [value, setValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(valueProp, defaultValue || null, onChange);
  let [anchorDate, setAnchorDateState] = (0, import_react2.useState)(null);
  let alignment = "center";
  if (value && value.start && value.end) {
    let start = (0, $f62d864046160412$export$f4a51ff076cc9a09)((0, $11d87f3f76e88657$export$93522d1a439f3617)(value.start), visibleDuration, locale, minValue, maxValue);
    let end = start.add(visibleDuration).subtract({
      days: 1
    });
    if (value.end.compare(end) > 0)
      alignment = "start";
  }
  let availableRangeRef = (0, import_react2.useRef)(null);
  let [availableRange, setAvailableRange] = (0, import_react2.useState)(null);
  let min = (0, import_react2.useMemo)(() => (0, $14e0f24ef4ac5c92$export$a75f2bff57811055)(minValue, availableRange === null || availableRange === void 0 ? void 0 : availableRange.start), [
    minValue,
    availableRange
  ]);
  let max = (0, import_react2.useMemo)(() => (0, $14e0f24ef4ac5c92$export$5c333a116e949cdd)(maxValue, availableRange === null || availableRange === void 0 ? void 0 : availableRange.end), [
    maxValue,
    availableRange
  ]);
  let calendar = (0, $131cf43a05231e1e$export$6d095e787d2b5e1f)({
    ...calendarProps,
    value: value && value.start,
    createCalendar,
    locale,
    visibleDuration,
    minValue: min,
    maxValue: max,
    selectionAlignment: alignment
  });
  let updateAvailableRange = (date) => {
    if (date && props.isDateUnavailable && !props.allowsNonContiguousRanges) {
      availableRangeRef.current = {
        start: $9a36b6ba2fb1a7c5$var$nextUnavailableDate(date, calendar, -1),
        end: $9a36b6ba2fb1a7c5$var$nextUnavailableDate(date, calendar, 1)
      };
      setAvailableRange(availableRangeRef.current);
    } else {
      availableRangeRef.current = null;
      setAvailableRange(null);
    }
  };
  let [lastVisibleRange, setLastVisibleRange] = (0, import_react2.useState)(calendar.visibleRange);
  if (!(0, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee)(calendar.visibleRange.start, lastVisibleRange.start) || !(0, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee)(calendar.visibleRange.end, lastVisibleRange.end)) {
    updateAvailableRange(anchorDate);
    setLastVisibleRange(calendar.visibleRange);
  }
  let setAnchorDate = (date) => {
    if (date) {
      setAnchorDateState(date);
      updateAvailableRange(date);
    } else {
      setAnchorDateState(null);
      updateAvailableRange(null);
    }
  };
  let highlightedRange = anchorDate ? $9a36b6ba2fb1a7c5$var$makeRange(anchorDate, calendar.focusedDate) : value && $9a36b6ba2fb1a7c5$var$makeRange(value.start, value.end);
  let selectDate = (date) => {
    if (props.isReadOnly)
      return;
    date = (0, $f62d864046160412$export$4f5203c0d889109e)(date, min, max);
    date = (0, $f62d864046160412$export$a1d3911297b952d7)(date, calendar.visibleRange.start, props.isDateUnavailable);
    if (!date)
      return;
    if (!anchorDate)
      setAnchorDate(date);
    else {
      let range = $9a36b6ba2fb1a7c5$var$makeRange(anchorDate, date);
      setValue({
        start: $9a36b6ba2fb1a7c5$var$convertValue(range.start, value === null || value === void 0 ? void 0 : value.start),
        end: $9a36b6ba2fb1a7c5$var$convertValue(range.end, value === null || value === void 0 ? void 0 : value.end)
      });
      setAnchorDate(null);
    }
  };
  let [isDragging, setDragging] = (0, import_react2.useState)(false);
  let { isDateUnavailable } = props;
  let isInvalidSelection = (0, import_react2.useMemo)(() => {
    if (!value || anchorDate)
      return false;
    if (isDateUnavailable && (isDateUnavailable(value.start) || isDateUnavailable(value.end)))
      return true;
    return (0, $f62d864046160412$export$eac50920cf2fd59a)(value.start, minValue, maxValue) || (0, $f62d864046160412$export$eac50920cf2fd59a)(value.end, minValue, maxValue);
  }, [
    isDateUnavailable,
    value,
    anchorDate,
    minValue,
    maxValue
  ]);
  let isValueInvalid = props.isInvalid || props.validationState === "invalid" || isInvalidSelection;
  let validationState = isValueInvalid ? "invalid" : null;
  return {
    ...calendar,
    value,
    setValue,
    anchorDate,
    setAnchorDate,
    highlightedRange,
    validationState,
    isValueInvalid,
    selectFocusedDate() {
      selectDate(calendar.focusedDate);
    },
    selectDate,
    highlightDate(date) {
      if (anchorDate)
        calendar.setFocusedDate(date);
    },
    isSelected(date) {
      return highlightedRange && date.compare(highlightedRange.start) >= 0 && date.compare(highlightedRange.end) <= 0 && !calendar.isCellDisabled(date) && !calendar.isCellUnavailable(date);
    },
    isInvalid(date) {
      var _availableRangeRef_current, _availableRangeRef_current1;
      return calendar.isInvalid(date) || (0, $f62d864046160412$export$eac50920cf2fd59a)(date, (_availableRangeRef_current = availableRangeRef.current) === null || _availableRangeRef_current === void 0 ? void 0 : _availableRangeRef_current.start, (_availableRangeRef_current1 = availableRangeRef.current) === null || _availableRangeRef_current1 === void 0 ? void 0 : _availableRangeRef_current1.end);
    },
    isDragging,
    setDragging
  };
}
function $9a36b6ba2fb1a7c5$var$makeRange(start, end) {
  if (!start || !end)
    return null;
  if (end.compare(start) < 0)
    [start, end] = [
      end,
      start
    ];
  return {
    start: (0, $11d87f3f76e88657$export$93522d1a439f3617)(start),
    end: (0, $11d87f3f76e88657$export$93522d1a439f3617)(end)
  };
}
function $9a36b6ba2fb1a7c5$var$convertValue(newValue, oldValue) {
  newValue = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(newValue, (oldValue === null || oldValue === void 0 ? void 0 : oldValue.calendar) || new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
  if (oldValue && "hour" in oldValue)
    return oldValue.set(newValue);
  return newValue;
}
function $9a36b6ba2fb1a7c5$var$nextUnavailableDate(anchorDate, state, dir) {
  let nextDate = anchorDate.add({
    days: dir
  });
  while ((dir < 0 ? nextDate.compare(state.visibleRange.start) >= 0 : nextDate.compare(state.visibleRange.end) <= 0) && !state.isCellUnavailable(nextDate))
    nextDate = nextDate.add({
      days: dir
    });
  if (state.isCellUnavailable(nextDate))
    return nextDate.add({
      days: -dir
    });
  return null;
}

// node_modules/@react-stately/checkbox/dist/useCheckboxGroupState.mjs
var import_react3 = __toESM(require_react(), 1);
function $587d3ad58be6d31f$export$daff6da51032a415(props = {}) {
  let [selectedValues, setValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || [], props.onChange);
  let isRequired = !!props.isRequired && selectedValues.length === 0;
  let invalidValues = (0, import_react3.useRef)(/* @__PURE__ */ new Map());
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: selectedValues
  });
  let isInvalid = validation.displayValidation.isInvalid;
  var _props_validationState;
  const state = {
    ...validation,
    value: selectedValues,
    setValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      setValue(value);
    },
    isDisabled: props.isDisabled || false,
    isReadOnly: props.isReadOnly || false,
    isSelected(value) {
      return selectedValues.includes(value);
    },
    addValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      if (!selectedValues.includes(value))
        setValue(selectedValues.concat(value));
    },
    removeValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      if (selectedValues.includes(value))
        setValue(selectedValues.filter((existingValue) => existingValue !== value));
    },
    toggleValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      if (selectedValues.includes(value))
        setValue(selectedValues.filter((existingValue) => existingValue !== value));
      else
        setValue(selectedValues.concat(value));
    },
    setInvalid(value, v) {
      let s = new Map(invalidValues.current);
      if (v.isInvalid)
        s.set(value, v);
      else
        s.delete(value);
      invalidValues.current = s;
      validation.updateValidation((0, $e5be200c675c3b3a$export$75ee7c75d68f5b0e)(...s.values()));
    },
    validationState: (_props_validationState = props.validationState) !== null && _props_validationState !== void 0 ? _props_validationState : isInvalid ? "invalid" : null,
    isInvalid,
    isRequired
  };
  return state;
}

// node_modules/@react-stately/list/dist/ListCollection.mjs
var $a02d57049d202695$export$d085fb9e920b5ca7 = class {
  *[Symbol.iterator]() {
    yield* this.iterable;
  }
  get size() {
    return this.keyMap.size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    return this.firstKey;
  }
  getLastKey() {
    return this.lastKey;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [
      ...this.getKeys()
    ];
    return this.getItem(keys[idx]);
  }
  getChildren(key) {
    let node = this.keyMap.get(key);
    return (node === null || node === void 0 ? void 0 : node.childNodes) || [];
  }
  constructor(nodes) {
    this.keyMap = /* @__PURE__ */ new Map();
    this.iterable = nodes;
    let visit = (node) => {
      this.keyMap.set(node.key, node);
      if (node.childNodes && node.type === "section")
        for (let child of node.childNodes)
          visit(child);
    };
    for (let node of nodes)
      visit(node);
    let last;
    let index = 0;
    for (let [key, node] of this.keyMap) {
      if (last) {
        last.nextKey = key;
        node.prevKey = last.key;
      } else {
        this.firstKey = key;
        node.prevKey = void 0;
      }
      if (node.type === "item")
        node.index = index++;
      last = node;
      last.nextKey = void 0;
    }
    this.lastKey = last === null || last === void 0 ? void 0 : last.key;
  }
};

// node_modules/@react-stately/selection/dist/Selection.mjs
var $e40ea825a81a3709$export$52baac22726c72bf = class _$e40ea825a81a3709$export$52baac22726c72bf extends Set {
  constructor(keys, anchorKey, currentKey) {
    super(keys);
    if (keys instanceof _$e40ea825a81a3709$export$52baac22726c72bf) {
      this.anchorKey = anchorKey || keys.anchorKey;
      this.currentKey = currentKey || keys.currentKey;
    } else {
      this.anchorKey = anchorKey;
      this.currentKey = currentKey;
    }
  }
};

// node_modules/@react-stately/selection/dist/useMultipleSelectionState.mjs
var import_react4 = __toESM(require_react(), 1);
function $7af3f5b51489e0b5$var$equalSets(setA, setB) {
  if (setA.size !== setB.size)
    return false;
  for (let item of setA) {
    if (!setB.has(item))
      return false;
  }
  return true;
}
function $7af3f5b51489e0b5$export$253fe78d46329472(props) {
  let { selectionMode = "none", disallowEmptySelection, allowDuplicateSelectionEvents, selectionBehavior: selectionBehaviorProp = "toggle", disabledBehavior = "all" } = props;
  let isFocusedRef = (0, import_react4.useRef)(false);
  let [, setFocused] = (0, import_react4.useState)(false);
  let focusedKeyRef = (0, import_react4.useRef)(null);
  let childFocusStrategyRef = (0, import_react4.useRef)(null);
  let [, setFocusedKey] = (0, import_react4.useState)(null);
  let selectedKeysProp = (0, import_react4.useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [
    props.selectedKeys
  ]);
  let defaultSelectedKeys = (0, import_react4.useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new (0, $e40ea825a81a3709$export$52baac22726c72bf)()), [
    props.defaultSelectedKeys
  ]);
  let [selectedKeys, setSelectedKeys] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);
  let disabledKeysProp = (0, import_react4.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(), [
    props.disabledKeys
  ]);
  let [selectionBehavior, setSelectionBehavior] = (0, import_react4.useState)(selectionBehaviorProp);
  if (selectionBehaviorProp === "replace" && selectionBehavior === "toggle" && typeof selectedKeys === "object" && selectedKeys.size === 0)
    setSelectionBehavior("replace");
  let lastSelectionBehavior = (0, import_react4.useRef)(selectionBehaviorProp);
  (0, import_react4.useEffect)(() => {
    if (selectionBehaviorProp !== lastSelectionBehavior.current) {
      setSelectionBehavior(selectionBehaviorProp);
      lastSelectionBehavior.current = selectionBehaviorProp;
    }
  }, [
    selectionBehaviorProp
  ]);
  return {
    selectionMode,
    disallowEmptySelection,
    selectionBehavior,
    setSelectionBehavior,
    get isFocused() {
      return isFocusedRef.current;
    },
    setFocused(f) {
      isFocusedRef.current = f;
      setFocused(f);
    },
    get focusedKey() {
      return focusedKeyRef.current;
    },
    get childFocusStrategy() {
      return childFocusStrategyRef.current;
    },
    setFocusedKey(k, childFocusStrategy = "first") {
      focusedKeyRef.current = k;
      childFocusStrategyRef.current = childFocusStrategy;
      setFocusedKey(k);
    },
    selectedKeys,
    setSelectedKeys(keys) {
      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys))
        setSelectedKeys(keys);
    },
    disabledKeys: disabledKeysProp,
    disabledBehavior
  };
}
function $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {
  if (!selection)
    return defaultValue;
  return selection === "all" ? "all" : new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selection);
}

// node_modules/@react-stately/selection/dist/SelectionManager.mjs
var $d496c0a20b6e58ec$export$6c8a5aaad13c9852 = class {
  /**
  * The type of selection that is allowed in the collection.
  */
  get selectionMode() {
    return this.state.selectionMode;
  }
  /**
  * Whether the collection allows empty selection.
  */
  get disallowEmptySelection() {
    return this.state.disallowEmptySelection;
  }
  /**
  * The selection behavior for the collection.
  */
  get selectionBehavior() {
    return this.state.selectionBehavior;
  }
  /**
  * Sets the selection behavior for the collection.
  */
  setSelectionBehavior(selectionBehavior) {
    this.state.setSelectionBehavior(selectionBehavior);
  }
  /**
  * Whether the collection is currently focused.
  */
  get isFocused() {
    return this.state.isFocused;
  }
  /**
  * Sets whether the collection is focused.
  */
  setFocused(isFocused) {
    this.state.setFocused(isFocused);
  }
  /**
  * The current focused key in the collection.
  */
  get focusedKey() {
    return this.state.focusedKey;
  }
  /** Whether the first or last child of the focused key should receive focus. */
  get childFocusStrategy() {
    return this.state.childFocusStrategy;
  }
  /**
  * Sets the focused key.
  */
  setFocusedKey(key, childFocusStrategy) {
    if (key == null || this.collection.getItem(key))
      this.state.setFocusedKey(key, childFocusStrategy);
  }
  /**
  * The currently selected keys in the collection.
  */
  get selectedKeys() {
    return this.state.selectedKeys === "all" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
  }
  /**
  * The raw selection value for the collection.
  * Either 'all' for select all, or a set of keys.
  */
  get rawSelection() {
    return this.state.selectedKeys;
  }
  /**
  * Returns whether a key is selected.
  */
  isSelected(key) {
    if (this.state.selectionMode === "none")
      return false;
    key = this.getKey(key);
    return this.state.selectedKeys === "all" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);
  }
  /**
  * Whether the selection is empty.
  */
  get isEmpty() {
    return this.state.selectedKeys !== "all" && this.state.selectedKeys.size === 0;
  }
  /**
  * Whether all items in the collection are selected.
  */
  get isSelectAll() {
    if (this.isEmpty)
      return false;
    if (this.state.selectedKeys === "all")
      return true;
    if (this._isSelectAll != null)
      return this._isSelectAll;
    let allKeys = this.getSelectAllKeys();
    let selectedKeys = this.state.selectedKeys;
    this._isSelectAll = allKeys.every((k) => selectedKeys.has(k));
    return this._isSelectAll;
  }
  get firstSelectedKey() {
    let first = null;
    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!first || item && (0, $c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, item, first) < 0)
        first = item;
    }
    return first === null || first === void 0 ? void 0 : first.key;
  }
  get lastSelectedKey() {
    let last = null;
    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!last || item && (0, $c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, item, last) > 0)
        last = item;
    }
    return last === null || last === void 0 ? void 0 : last.key;
  }
  get disabledKeys() {
    return this.state.disabledKeys;
  }
  get disabledBehavior() {
    return this.state.disabledBehavior;
  }
  /**
  * Extends the selection to the given key.
  */
  extendSelection(toKey) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single") {
      this.replaceSelection(toKey);
      return;
    }
    toKey = this.getKey(toKey);
    let selection;
    if (this.state.selectedKeys === "all")
      selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([
        toKey
      ], toKey, toKey);
    else {
      let selectedKeys = this.state.selectedKeys;
      let anchorKey = selectedKeys.anchorKey || toKey;
      selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);
      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey))
        selection.delete(key);
      for (let key of this.getKeyRange(toKey, anchorKey))
        if (this.canSelectItem(key))
          selection.add(key);
    }
    this.state.setSelectedKeys(selection);
  }
  getKeyRange(from, to) {
    let fromItem = this.collection.getItem(from);
    let toItem = this.collection.getItem(to);
    if (fromItem && toItem) {
      if ((0, $c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, fromItem, toItem) <= 0)
        return this.getKeyRangeInternal(from, to);
      return this.getKeyRangeInternal(to, from);
    }
    return [];
  }
  getKeyRangeInternal(from, to) {
    let keys = [];
    let key = from;
    while (key) {
      let item = this.collection.getItem(key);
      if (item && item.type === "item" || item.type === "cell" && this.allowsCellSelection)
        keys.push(key);
      if (key === to)
        return keys;
      key = this.collection.getKeyAfter(key);
    }
    return [];
  }
  getKey(key) {
    let item = this.collection.getItem(key);
    if (!item)
      return key;
    if (item.type === "cell" && this.allowsCellSelection)
      return key;
    while (item.type !== "item" && item.parentKey != null)
      item = this.collection.getItem(item.parentKey);
    if (!item || item.type !== "item")
      return null;
    return item.key;
  }
  /**
  * Toggles whether the given key is selected.
  */
  toggleSelection(key) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single" && !this.isSelected(key)) {
      this.replaceSelection(key);
      return;
    }
    key = this.getKey(key);
    if (key == null)
      return;
    let keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === "all" ? this.getSelectAllKeys() : this.state.selectedKeys);
    if (keys.has(key))
      keys.delete(key);
    else if (this.canSelectItem(key)) {
      keys.add(key);
      keys.anchorKey = key;
      keys.currentKey = key;
    }
    if (this.disallowEmptySelection && keys.size === 0)
      return;
    this.state.setSelectedKeys(keys);
  }
  /**
  * Replaces the selection with only the given key.
  */
  replaceSelection(key) {
    if (this.selectionMode === "none")
      return;
    key = this.getKey(key);
    if (key == null)
      return;
    let selection = this.canSelectItem(key) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([
      key
    ], key, key) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();
    this.state.setSelectedKeys(selection);
  }
  /**
  * Replaces the selection with the given keys.
  */
  setSelectedKeys(keys) {
    if (this.selectionMode === "none")
      return;
    let selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();
    for (let key of keys) {
      key = this.getKey(key);
      if (key != null) {
        selection.add(key);
        if (this.selectionMode === "single")
          break;
      }
    }
    this.state.setSelectedKeys(selection);
  }
  getSelectAllKeys() {
    let keys = [];
    let addKeys = (key) => {
      while (key) {
        if (this.canSelectItem(key)) {
          let item = this.collection.getItem(key);
          if (item.type === "item")
            keys.push(key);
          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== "item"))
            addKeys((0, $c5a24bc478652b5f$export$fbdeaa6a76694f71)((0, $c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection)).key);
        }
        key = this.collection.getKeyAfter(key);
      }
    };
    addKeys(this.collection.getFirstKey());
    return keys;
  }
  /**
  * Selects all items in the collection.
  */
  selectAll() {
    if (!this.isSelectAll && this.selectionMode === "multiple")
      this.state.setSelectedKeys("all");
  }
  /**
  * Removes all keys from the selection.
  */
  clearSelection() {
    if (!this.disallowEmptySelection && (this.state.selectedKeys === "all" || this.state.selectedKeys.size > 0))
      this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());
  }
  /**
  * Toggles between select all and an empty selection.
  */
  toggleSelectAll() {
    if (this.isSelectAll)
      this.clearSelection();
    else
      this.selectAll();
  }
  select(key, e) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single") {
      if (this.isSelected(key) && !this.disallowEmptySelection)
        this.toggleSelection(key);
      else
        this.replaceSelection(key);
    } else if (this.selectionBehavior === "toggle" || e && (e.pointerType === "touch" || e.pointerType === "virtual"))
      this.toggleSelection(key);
    else
      this.replaceSelection(key);
  }
  /**
  * Returns whether the current selection is equal to the given selection.
  */
  isSelectionEqual(selection) {
    if (selection === this.state.selectedKeys)
      return true;
    let selectedKeys = this.selectedKeys;
    if (selection.size !== selectedKeys.size)
      return false;
    for (let key of selection) {
      if (!selectedKeys.has(key))
        return false;
    }
    for (let key of selectedKeys) {
      if (!selection.has(key))
        return false;
    }
    return true;
  }
  canSelectItem(key) {
    var _item_props;
    if (this.state.selectionMode === "none" || this.state.disabledKeys.has(key))
      return false;
    let item = this.collection.getItem(key);
    if (!item || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.isDisabled) || item.type === "cell" && !this.allowsCellSelection)
      return false;
    return true;
  }
  isDisabled(key) {
    var _this_collection_getItem_props, _this_collection_getItem;
    return this.state.disabledBehavior === "all" && (this.state.disabledKeys.has(key) || !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.isDisabled));
  }
  isLink(key) {
    var _this_collection_getItem_props, _this_collection_getItem;
    return !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.href);
  }
  getItemProps(key) {
    var _this_collection_getItem;
    return (_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : _this_collection_getItem.props;
  }
  constructor(collection, state, options) {
    this.collection = collection;
    this.state = state;
    var _options_allowsCellSelection;
    this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;
    this._isSelectAll = null;
  }
};

// node_modules/@react-stately/list/dist/useListState.mjs
var import_react5 = __toESM(require_react(), 1);
function $e72dd72e1c76a225$export$2f645645f7bca764(props) {
  let { filter } = props;
  let selectionState = (0, $7af3f5b51489e0b5$export$253fe78d46329472)(props);
  let disabledKeys = (0, import_react5.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(), [
    props.disabledKeys
  ]);
  let factory = (0, import_react5.useCallback)((nodes) => filter ? new (0, $a02d57049d202695$export$d085fb9e920b5ca7)(filter(nodes)) : new (0, $a02d57049d202695$export$d085fb9e920b5ca7)(nodes), [
    filter
  ]);
  let context = (0, import_react5.useMemo)(() => ({
    suppressTextValueWarning: props.suppressTextValueWarning
  }), [
    props.suppressTextValueWarning
  ]);
  let collection = (0, $7613b1592d41b092$export$6cd28814d92fa9c9)(props, factory, context);
  let selectionManager = (0, import_react5.useMemo)(() => new (0, $d496c0a20b6e58ec$export$6c8a5aaad13c9852)(collection, selectionState), [
    collection,
    selectionState
  ]);
  const cachedCollection = (0, import_react5.useRef)(null);
  (0, import_react5.useEffect)(() => {
    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {
      const startItem = cachedCollection.current.getItem(selectionState.focusedKey);
      const cachedItemNodes = [
        ...cachedCollection.current.getKeys()
      ].map((key) => {
        const itemNode = cachedCollection.current.getItem(key);
        return itemNode.type === "item" ? itemNode : null;
      }).filter((node) => node !== null);
      const itemNodes = [
        ...collection.getKeys()
      ].map((key) => {
        const itemNode = collection.getItem(key);
        return itemNode.type === "item" ? itemNode : null;
      }).filter((node) => node !== null);
      const diff = cachedItemNodes.length - itemNodes.length;
      let index = Math.min(diff > 1 ? Math.max(startItem.index - diff + 1, 0) : startItem.index, itemNodes.length - 1);
      let newNode;
      while (index >= 0) {
        if (!selectionManager.isDisabled(itemNodes[index].key)) {
          newNode = itemNodes[index];
          break;
        }
        if (index < itemNodes.length - 1)
          index++;
        else {
          if (index > startItem.index)
            index = startItem.index;
          index--;
        }
      }
      selectionState.setFocusedKey(newNode ? newNode.key : null);
    }
    cachedCollection.current = collection;
  }, [
    collection,
    selectionManager,
    selectionState,
    selectionState.focusedKey
  ]);
  return {
    collection,
    disabledKeys,
    selectionManager
  };
}

// node_modules/@react-stately/list/dist/useSingleSelectListState.mjs
var import_react6 = __toESM(require_react(), 1);
function $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {
  var _props_defaultSelectedKey;
  let [selectedKey, setSelectedKey] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.selectedKey, (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : null, props.onSelectionChange);
  let selectedKeys = (0, import_react6.useMemo)(() => selectedKey != null ? [
    selectedKey
  ] : [], [
    selectedKey
  ]);
  let { collection, disabledKeys, selectionManager } = (0, $e72dd72e1c76a225$export$2f645645f7bca764)({
    ...props,
    selectionMode: "single",
    disallowEmptySelection: true,
    allowDuplicateSelectionEvents: true,
    selectedKeys,
    onSelectionChange: (keys) => {
      var _keys_values_next_value;
      let key = (_keys_values_next_value = keys.values().next().value) !== null && _keys_values_next_value !== void 0 ? _keys_values_next_value : null;
      if (key === selectedKey && props.onSelectionChange)
        props.onSelectionChange(key);
      setSelectedKey(key);
    }
  });
  let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;
  return {
    collection,
    disabledKeys,
    selectionManager,
    selectedKey,
    setSelectedKey,
    selectedItem
  };
}

// node_modules/@react-stately/combobox/dist/useComboBoxState.mjs
var import_react8 = __toESM(require_react(), 1);

// node_modules/@react-stately/overlays/dist/useOverlayTriggerState.mjs
var import_react7 = __toESM(require_react(), 1);
function $fc909762b330b746$export$61c6a8c84e605fb6(props) {
  let [isOpen, setOpen] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isOpen, props.defaultOpen || false, props.onOpenChange);
  const open = (0, import_react7.useCallback)(() => {
    setOpen(true);
  }, [
    setOpen
  ]);
  const close = (0, import_react7.useCallback)(() => {
    setOpen(false);
  }, [
    setOpen
  ]);
  const toggle = (0, import_react7.useCallback)(() => {
    setOpen(!isOpen);
  }, [
    setOpen,
    isOpen
  ]);
  return {
    isOpen,
    setOpen,
    open,
    close,
    toggle
  };
}

// node_modules/@react-stately/combobox/dist/useComboBoxState.mjs
function $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e(props) {
  var _collection_getItem, _collection_getItem1;
  let { defaultFilter, menuTrigger = "input", allowsEmptyCollection = false, allowsCustomValue, shouldCloseOnBlur = true } = props;
  let [showAllItems, setShowAllItems] = (0, import_react8.useState)(false);
  let [isFocused, setFocusedState] = (0, import_react8.useState)(false);
  let [focusStrategy, setFocusStrategy] = (0, import_react8.useState)(null);
  let onSelectionChange = (key) => {
    if (props.onSelectionChange)
      props.onSelectionChange(key);
    if (key === selectedKey) {
      resetInputValue();
      closeMenu();
    }
  };
  var _props_items;
  let { collection, selectionManager, selectedKey, setSelectedKey, selectedItem, disabledKeys } = (0, $a0d645289fe9b86b$export$e7f05e985daf4b5f)({
    ...props,
    onSelectionChange,
    items: (_props_items = props.items) !== null && _props_items !== void 0 ? _props_items : props.defaultItems
  });
  var _props_defaultInputValue, _ref;
  let [inputValue, setInputValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.inputValue, (_ref = (_props_defaultInputValue = props.defaultInputValue) !== null && _props_defaultInputValue !== void 0 ? _props_defaultInputValue : (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _ref !== void 0 ? _ref : "", props.onInputChange);
  let originalCollection = collection;
  let filteredCollection = (0, import_react8.useMemo)(() => (
    // No default filter if items are controlled.
    props.items != null || !defaultFilter ? collection : $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, defaultFilter)
  ), [
    collection,
    inputValue,
    defaultFilter,
    props.items
  ]);
  let [lastCollection, setLastCollection] = (0, import_react8.useState)(filteredCollection);
  let menuOpenTrigger = (0, import_react8.useRef)("focus");
  let onOpenChange = (open2) => {
    if (props.onOpenChange)
      props.onOpenChange(open2, open2 ? menuOpenTrigger.current : void 0);
    selectionManager.setFocused(open2);
    if (!open2)
      selectionManager.setFocusedKey(null);
  };
  let triggerState = (0, $fc909762b330b746$export$61c6a8c84e605fb6)({
    ...props,
    onOpenChange,
    isOpen: void 0,
    defaultOpen: void 0
  });
  let open = (focusStrategy2 = null, trigger) => {
    let displayAllItems = trigger === "manual" || trigger === "focus" && menuTrigger === "focus";
    if (allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) {
      if (displayAllItems && !triggerState.isOpen && props.items === void 0)
        setShowAllItems(true);
      menuOpenTrigger.current = trigger;
      setFocusStrategy(focusStrategy2);
      triggerState.open();
    }
  };
  let toggle = (focusStrategy2 = null, trigger) => {
    let displayAllItems = trigger === "manual" || trigger === "focus" && menuTrigger === "focus";
    if (!(allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) && !triggerState.isOpen)
      return;
    if (displayAllItems && !triggerState.isOpen && props.items === void 0)
      setShowAllItems(true);
    if (!triggerState.isOpen)
      menuOpenTrigger.current = trigger;
    toggleMenu(focusStrategy2);
  };
  let updateLastCollection = (0, import_react8.useCallback)(() => {
    setLastCollection(showAllItems ? originalCollection : filteredCollection);
  }, [
    showAllItems,
    originalCollection,
    filteredCollection
  ]);
  let toggleMenu = (0, import_react8.useCallback)((focusStrategy2 = null) => {
    if (triggerState.isOpen)
      updateLastCollection();
    setFocusStrategy(focusStrategy2);
    triggerState.toggle();
  }, [
    triggerState,
    updateLastCollection
  ]);
  let closeMenu = (0, import_react8.useCallback)(() => {
    if (triggerState.isOpen) {
      updateLastCollection();
      triggerState.close();
    }
  }, [
    triggerState,
    updateLastCollection
  ]);
  let [lastValue, setLastValue] = (0, import_react8.useState)(inputValue);
  let resetInputValue = () => {
    var _collection_getItem2;
    var _collection_getItem_textValue2;
    let itemText = (_collection_getItem_textValue2 = (_collection_getItem2 = collection.getItem(selectedKey)) === null || _collection_getItem2 === void 0 ? void 0 : _collection_getItem2.textValue) !== null && _collection_getItem_textValue2 !== void 0 ? _collection_getItem_textValue2 : "";
    setLastValue(itemText);
    setInputValue(itemText);
  };
  var _props_selectedKey, _ref1;
  let lastSelectedKey = (0, import_react8.useRef)((_ref1 = (_props_selectedKey = props.selectedKey) !== null && _props_selectedKey !== void 0 ? _props_selectedKey : props.defaultSelectedKey) !== null && _ref1 !== void 0 ? _ref1 : null);
  var _collection_getItem_textValue;
  let lastSelectedKeyText = (0, import_react8.useRef)((_collection_getItem_textValue = (_collection_getItem1 = collection.getItem(selectedKey)) === null || _collection_getItem1 === void 0 ? void 0 : _collection_getItem1.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : "");
  (0, import_react8.useEffect)(() => {
    var _collection_getItem2;
    if (isFocused && (filteredCollection.size > 0 || allowsEmptyCollection) && !triggerState.isOpen && inputValue !== lastValue && menuTrigger !== "manual")
      open(null, "input");
    if (!showAllItems && !allowsEmptyCollection && triggerState.isOpen && filteredCollection.size === 0)
      closeMenu();
    if (selectedKey != null && selectedKey !== lastSelectedKey.current)
      closeMenu();
    if (inputValue !== lastValue) {
      selectionManager.setFocusedKey(null);
      setShowAllItems(false);
      if (inputValue === "" && (props.inputValue === void 0 || props.selectedKey === void 0))
        setSelectedKey(null);
    }
    if (selectedKey !== lastSelectedKey.current && (props.inputValue === void 0 || props.selectedKey === void 0))
      resetInputValue();
    else if (lastValue !== inputValue)
      setLastValue(inputValue);
    var _collection_getItem_textValue2;
    let selectedItemText = (_collection_getItem_textValue2 = (_collection_getItem2 = collection.getItem(selectedKey)) === null || _collection_getItem2 === void 0 ? void 0 : _collection_getItem2.textValue) !== null && _collection_getItem_textValue2 !== void 0 ? _collection_getItem_textValue2 : "";
    if (!isFocused && selectedKey != null && props.inputValue === void 0 && selectedKey === lastSelectedKey.current) {
      if (lastSelectedKeyText.current !== selectedItemText) {
        setLastValue(selectedItemText);
        setInputValue(selectedItemText);
      }
    }
    lastSelectedKey.current = selectedKey;
    lastSelectedKeyText.current = selectedItemText;
  });
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: (0, import_react8.useMemo)(() => ({
      inputValue,
      selectedKey
    }), [
      inputValue,
      selectedKey
    ])
  });
  let revert = () => {
    if (allowsCustomValue && selectedKey == null)
      commitCustomValue();
    else
      commitSelection();
  };
  let commitCustomValue = () => {
    lastSelectedKey.current = null;
    setSelectedKey(null);
    closeMenu();
  };
  let commitSelection = () => {
    if (props.selectedKey !== void 0 && props.inputValue !== void 0) {
      var _collection_getItem2;
      props.onSelectionChange(selectedKey);
      var _collection_getItem_textValue2;
      let itemText = (_collection_getItem_textValue2 = (_collection_getItem2 = collection.getItem(selectedKey)) === null || _collection_getItem2 === void 0 ? void 0 : _collection_getItem2.textValue) !== null && _collection_getItem_textValue2 !== void 0 ? _collection_getItem_textValue2 : "";
      setLastValue(itemText);
      closeMenu();
    } else {
      resetInputValue();
      closeMenu();
    }
  };
  const commitValue = () => {
    if (allowsCustomValue) {
      var _collection_getItem2;
      var _collection_getItem_textValue2;
      const itemText = (_collection_getItem_textValue2 = (_collection_getItem2 = collection.getItem(selectedKey)) === null || _collection_getItem2 === void 0 ? void 0 : _collection_getItem2.textValue) !== null && _collection_getItem_textValue2 !== void 0 ? _collection_getItem_textValue2 : "";
      inputValue === itemText ? commitSelection() : commitCustomValue();
    } else
      commitSelection();
  };
  let commit = () => {
    if (triggerState.isOpen && selectionManager.focusedKey != null) {
      if (selectedKey === selectionManager.focusedKey)
        commitSelection();
      else
        setSelectedKey(selectionManager.focusedKey);
    } else
      commitValue();
  };
  let valueOnFocus = (0, import_react8.useRef)(inputValue);
  let setFocused = (isFocused2) => {
    if (isFocused2) {
      valueOnFocus.current = inputValue;
      if (menuTrigger === "focus")
        open(null, "focus");
    } else {
      if (shouldCloseOnBlur)
        commitValue();
      if (inputValue !== valueOnFocus.current)
        validation.commitValidation();
    }
    setFocusedState(isFocused2);
  };
  let displayedCollection = (0, import_react8.useMemo)(() => {
    if (triggerState.isOpen) {
      if (showAllItems)
        return originalCollection;
      else
        return filteredCollection;
    } else
      return lastCollection;
  }, [
    triggerState.isOpen,
    originalCollection,
    filteredCollection,
    showAllItems,
    lastCollection
  ]);
  return {
    ...validation,
    ...triggerState,
    focusStrategy,
    toggle,
    open,
    close: commitValue,
    selectionManager,
    selectedKey,
    setSelectedKey,
    disabledKeys,
    isFocused,
    setFocused,
    selectedItem,
    collection: displayedCollection,
    inputValue,
    setInputValue,
    commit,
    revert
  };
}
function $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, filter) {
  return new (0, $a02d57049d202695$export$d085fb9e920b5ca7)($a9e7382a7d111cb5$var$filterNodes(collection, collection, inputValue, filter));
}
function $a9e7382a7d111cb5$var$filterNodes(collection, nodes, inputValue, filter) {
  let filteredNode = [];
  for (let node of nodes) {
    if (node.type === "section" && node.hasChildNodes) {
      let filtered = $a9e7382a7d111cb5$var$filterNodes(collection, (0, $c5a24bc478652b5f$export$1005530eda016c13)(node, collection), inputValue, filter);
      if ([
        ...filtered
      ].some((node2) => node2.type === "item"))
        filteredNode.push({
          ...node,
          childNodes: filtered
        });
    } else if (node.type === "item" && filter(node.textValue, inputValue))
      filteredNode.push({
        ...node
      });
    else if (node.type !== "item")
      filteredNode.push({
        ...node
      });
  }
  return filteredNode;
}

// node_modules/@react-stately/datepicker/dist/ar-AE.mjs
var $b3427c06585c22a0$exports = {};
$b3427c06585c22a0$exports = {
  "rangeOverflow": (args) => `يجب أن تكون القيمة ${args.maxValue} أو قبل ذلك.`,
  "rangeReversed": `تاريخ البدء يجب أن يكون قبل تاريخ الانتهاء.`,
  "rangeUnderflow": (args) => `يجب أن تكون القيمة ${args.minValue} أو بعد ذلك.`,
  "unavailableDate": `البيانات المحددة غير متاحة.`
};

// node_modules/@react-stately/datepicker/dist/bg-BG.mjs
var $d282528f459122b9$exports = {};
$d282528f459122b9$exports = {
  "rangeOverflow": (args) => `Стойността трябва да е ${args.maxValue} или по-ранна.`,
  "rangeReversed": `Началната дата трябва да е преди крайната.`,
  "rangeUnderflow": (args) => `Стойността трябва да е ${args.minValue} или по-късно.`,
  "unavailableDate": `Избраната дата не е налична.`
};

// node_modules/@react-stately/datepicker/dist/cs-CZ.mjs
var $2d5eecd634a9ca45$exports = {};
$2d5eecd634a9ca45$exports = {
  "rangeOverflow": (args) => `Hodnota musí být ${args.maxValue} nebo dřívější.`,
  "rangeReversed": `Datum zahájení musí předcházet datu ukončení.`,
  "rangeUnderflow": (args) => `Hodnota musí být ${args.minValue} nebo pozdější.`,
  "unavailableDate": `Vybrané datum není k dispozici.`
};

// node_modules/@react-stately/datepicker/dist/da-DK.mjs
var $c8e2288226c24a67$exports = {};
$c8e2288226c24a67$exports = {
  "rangeOverflow": (args) => `Værdien skal være ${args.maxValue} eller tidligere.`,
  "rangeReversed": `Startdatoen skal være før slutdatoen.`,
  "rangeUnderflow": (args) => `Værdien skal være ${args.minValue} eller nyere.`,
  "unavailableDate": `Den valgte dato er ikke tilgængelig.`
};

// node_modules/@react-stately/datepicker/dist/de-DE.mjs
var $6f5745e389c346d7$exports = {};
$6f5745e389c346d7$exports = {
  "rangeOverflow": (args) => `Der Wert muss ${args.maxValue} oder früher sein.`,
  "rangeReversed": `Das Anfangsdatum muss vor dem Enddatum liegen.`,
  "rangeUnderflow": (args) => `Der Wert muss ${args.minValue} oder später sein.`,
  "unavailableDate": `Das ausgewählte Datum ist nicht verfügbar.`
};

// node_modules/@react-stately/datepicker/dist/el-GR.mjs
var $8c882ccf4300d1da$exports = {};
$8c882ccf4300d1da$exports = {
  "rangeOverflow": (args) => `Η τιμή πρέπει να είναι ${args.maxValue} ή παλαιότερη.`,
  "rangeReversed": `Η ημερομηνία έναρξης πρέπει να είναι πριν από την ημερομηνία λήξης.`,
  "rangeUnderflow": (args) => `Η τιμή πρέπει να είναι ${args.minValue} ή μεταγενέστερη.`,
  "unavailableDate": `Η επιλεγμένη ημερομηνία δεν είναι διαθέσιμη.`
};

// node_modules/@react-stately/datepicker/dist/en-US.mjs
var $22195056771860be$exports = {};
$22195056771860be$exports = {
  "rangeUnderflow": (args) => `Value must be ${args.minValue} or later.`,
  "rangeOverflow": (args) => `Value must be ${args.maxValue} or earlier.`,
  "rangeReversed": `Start date must be before end date.`,
  "unavailableDate": `Selected date unavailable.`
};

// node_modules/@react-stately/datepicker/dist/es-ES.mjs
var $cedfa43b4e2a5906$exports = {};
$cedfa43b4e2a5906$exports = {
  "rangeOverflow": (args) => `El valor debe ser ${args.maxValue} o anterior.`,
  "rangeReversed": `La fecha de inicio debe ser anterior a la fecha de finalización.`,
  "rangeUnderflow": (args) => `El valor debe ser ${args.minValue} o posterior.`,
  "unavailableDate": `Fecha seleccionada no disponible.`
};

// node_modules/@react-stately/datepicker/dist/et-EE.mjs
var $eeeaa8daee3601c7$exports = {};
$eeeaa8daee3601c7$exports = {
  "rangeOverflow": (args) => `Väärtus peab olema ${args.maxValue} või varasem.`,
  "rangeReversed": `Alguskuupäev peab olema enne lõppkuupäeva.`,
  "rangeUnderflow": (args) => `Väärtus peab olema ${args.minValue} või hilisem.`,
  "unavailableDate": `Valitud kuupäev pole saadaval.`
};

// node_modules/@react-stately/datepicker/dist/fi-FI.mjs
var $35e0614a49b3bb40$exports = {};
$35e0614a49b3bb40$exports = {
  "rangeOverflow": (args) => `Arvon on oltava ${args.maxValue} tai sitä aikaisempi.`,
  "rangeReversed": `Aloituspäivän on oltava ennen lopetuspäivää.`,
  "rangeUnderflow": (args) => `Arvon on oltava ${args.minValue} tai sitä myöhäisempi.`,
  "unavailableDate": `Valittu päivämäärä ei ole käytettävissä.`
};

// node_modules/@react-stately/datepicker/dist/fr-FR.mjs
var $929bc63f7705a78f$exports = {};
$929bc63f7705a78f$exports = {
  "rangeOverflow": (args) => `La valeur doit être ${args.maxValue} ou antérieure.`,
  "rangeReversed": `La date de début doit être antérieure à la date de fin.`,
  "rangeUnderflow": (args) => `La valeur doit être ${args.minValue} ou ultérieure.`,
  "unavailableDate": `La date sélectionnée n’est pas disponible.`
};

// node_modules/@react-stately/datepicker/dist/he-IL.mjs
var $9a28d073b034d183$exports = {};
$9a28d073b034d183$exports = {
  "rangeOverflow": (args) => `הערך חייב להיות ${args.maxValue} או מוקדם יותר.`,
  "rangeReversed": `תאריך ההתחלה חייב להיות לפני תאריך הסיום.`,
  "rangeUnderflow": (args) => `הערך חייב להיות ${args.minValue} או מאוחר יותר.`,
  "unavailableDate": `התאריך הנבחר אינו זמין.`
};

// node_modules/@react-stately/datepicker/dist/hr-HR.mjs
var $7743e79780ebcca3$exports = {};
$7743e79780ebcca3$exports = {
  "rangeOverflow": (args) => `Vrijednost mora biti ${args.maxValue} ili ranije.`,
  "rangeReversed": `Datum početka mora biti prije datuma završetka.`,
  "rangeUnderflow": (args) => `Vrijednost mora biti ${args.minValue} ili kasnije.`,
  "unavailableDate": `Odabrani datum nije dostupan.`
};

// node_modules/@react-stately/datepicker/dist/hu-HU.mjs
var $3351817a04898858$exports = {};
$3351817a04898858$exports = {
  "rangeOverflow": (args) => `Az értéknek ${args.maxValue} vagy korábbinak kell lennie.`,
  "rangeReversed": `A kezdő dátumnak a befejező dátumnál korábbinak kell lennie.`,
  "rangeUnderflow": (args) => `Az értéknek ${args.minValue} vagy későbbinek kell lennie.`,
  "unavailableDate": `A kiválasztott dátum nem érhető el.`
};

// node_modules/@react-stately/datepicker/dist/it-IT.mjs
var $4120bdb1d03484db$exports = {};
$4120bdb1d03484db$exports = {
  "rangeOverflow": (args) => `Il valore deve essere ${args.maxValue} o precedente.`,
  "rangeReversed": `La data di inizio deve essere antecedente alla data di fine.`,
  "rangeUnderflow": (args) => `Il valore deve essere ${args.minValue} o successivo.`,
  "unavailableDate": `Data selezionata non disponibile.`
};

// node_modules/@react-stately/datepicker/dist/ja-JP.mjs
var $65e5e1569f34ea4f$exports = {};
$65e5e1569f34ea4f$exports = {
  "rangeOverflow": (args) => `値は ${args.maxValue} 以下にする必要があります。`,
  "rangeReversed": `開始日は終了日より前にする必要があります。`,
  "rangeUnderflow": (args) => `値は ${args.minValue} 以上にする必要があります。`,
  "unavailableDate": `選択した日付は使用できません。`
};

// node_modules/@react-stately/datepicker/dist/ko-KR.mjs
var $d34552a7550967e7$exports = {};
$d34552a7550967e7$exports = {
  "rangeOverflow": (args) => `값은 ${args.maxValue} 이전이어야 합니다.`,
  "rangeReversed": `시작일은 종료일 이전이어야 합니다.`,
  "rangeUnderflow": (args) => `값은 ${args.minValue} 이상이어야 합니다.`,
  "unavailableDate": `선택한 날짜를 사용할 수 없습니다.`
};

// node_modules/@react-stately/datepicker/dist/lt-LT.mjs
var $8f855bffe63f6eca$exports = {};
$8f855bffe63f6eca$exports = {
  "rangeOverflow": (args) => `Reikšmė turi būti ${args.maxValue} arba ankstesnė.`,
  "rangeReversed": `Pradžios data turi būti ankstesnė nei pabaigos data.`,
  "rangeUnderflow": (args) => `Reikšmė turi būti ${args.minValue} arba naujesnė.`,
  "unavailableDate": `Pasirinkta data nepasiekiama.`
};

// node_modules/@react-stately/datepicker/dist/lv-LV.mjs
var $ce40f46d09034645$exports = {};
$ce40f46d09034645$exports = {
  "rangeOverflow": (args) => `Vērtībai ir jābūt ${args.maxValue} vai agrākai.`,
  "rangeReversed": `Sākuma datumam ir jābūt pirms beigu datuma.`,
  "rangeUnderflow": (args) => `Vērtībai ir jābūt ${args.minValue} vai vēlākai.`,
  "unavailableDate": `Atlasītais datums nav pieejams.`
};

// node_modules/@react-stately/datepicker/dist/nb-NO.mjs
var $dd1a9a73340c793e$exports = {};
$dd1a9a73340c793e$exports = {
  "rangeOverflow": (args) => `Verdien må være ${args.maxValue} eller tidligere.`,
  "rangeReversed": `Startdatoen må være før sluttdatoen.`,
  "rangeUnderflow": (args) => `Verdien må være ${args.minValue} eller senere.`,
  "unavailableDate": `Valgt dato utilgjengelig.`
};

// node_modules/@react-stately/datepicker/dist/nl-NL.mjs
var $4ee1fb3f0cbe6f59$exports = {};
$4ee1fb3f0cbe6f59$exports = {
  "rangeOverflow": (args) => `Waarde moet ${args.maxValue} of eerder zijn.`,
  "rangeReversed": `De startdatum moet voor de einddatum liggen.`,
  "rangeUnderflow": (args) => `Waarde moet ${args.minValue} of later zijn.`,
  "unavailableDate": `Geselecteerde datum niet beschikbaar.`
};

// node_modules/@react-stately/datepicker/dist/pl-PL.mjs
var $c85829aebb0bc94b$exports = {};
$c85829aebb0bc94b$exports = {
  "rangeOverflow": (args) => `Wartość musi mieć wartość ${args.maxValue} lub wcześniejszą.`,
  "rangeReversed": `Data rozpoczęcia musi być wcześniejsza niż data zakończenia.`,
  "rangeUnderflow": (args) => `Wartość musi mieć wartość ${args.minValue} lub późniejszą.`,
  "unavailableDate": `Wybrana data jest niedostępna.`
};

// node_modules/@react-stately/datepicker/dist/pt-BR.mjs
var $27f5cd2291ca8a02$exports = {};
$27f5cd2291ca8a02$exports = {
  "rangeOverflow": (args) => `O valor deve ser ${args.maxValue} ou anterior.`,
  "rangeReversed": `A data inicial deve ser anterior à data final.`,
  "rangeUnderflow": (args) => `O valor deve ser ${args.minValue} ou posterior.`,
  "unavailableDate": `Data selecionada indisponível.`
};

// node_modules/@react-stately/datepicker/dist/pt-PT.mjs
var $e046fdccd69bea8e$exports = {};
$e046fdccd69bea8e$exports = {
  "rangeOverflow": (args) => `O valor tem de ser ${args.maxValue} ou anterior.`,
  "rangeReversed": `A data de início deve ser anterior à data de fim.`,
  "rangeUnderflow": (args) => `O valor tem de ser ${args.minValue} ou posterior.`,
  "unavailableDate": `Data selecionada indisponível.`
};

// node_modules/@react-stately/datepicker/dist/ro-RO.mjs
var $fa5f88e804986547$exports = {};
$fa5f88e804986547$exports = {
  "rangeOverflow": (args) => `Valoarea trebuie să fie ${args.maxValue} sau anterioară.`,
  "rangeReversed": `Data de început trebuie să fie anterioară datei de sfârșit.`,
  "rangeUnderflow": (args) => `Valoarea trebuie să fie ${args.minValue} sau ulterioară.`,
  "unavailableDate": `Data selectată nu este disponibilă.`
};

// node_modules/@react-stately/datepicker/dist/ru-RU.mjs
var $28e4714602d1b568$exports = {};
$28e4714602d1b568$exports = {
  "rangeOverflow": (args) => `Значение должно быть не позже ${args.maxValue}.`,
  "rangeReversed": `Дата начала должна предшествовать дате окончания.`,
  "rangeUnderflow": (args) => `Значение должно быть не раньше ${args.minValue}.`,
  "unavailableDate": `Выбранная дата недоступна.`
};

// node_modules/@react-stately/datepicker/dist/sk-SK.mjs
var $4e3bc8cf783ad569$exports = {};
$4e3bc8cf783ad569$exports = {
  "rangeOverflow": (args) => `Hodnota musí byť ${args.maxValue} alebo skoršia.`,
  "rangeReversed": `Dátum začiatku musí byť skorší ako dátum konca.`,
  "rangeUnderflow": (args) => `Hodnota musí byť ${args.minValue} alebo neskoršia.`,
  "unavailableDate": `Vybratý dátum je nedostupný.`
};

// node_modules/@react-stately/datepicker/dist/sl-SI.mjs
var $bee07513333bdc15$exports = {};
$bee07513333bdc15$exports = {
  "rangeOverflow": (args) => `Vrednost mora biti ${args.maxValue} ali starejša.`,
  "rangeReversed": `Začetni datum mora biti pred končnim datumom.`,
  "rangeUnderflow": (args) => `Vrednost mora biti ${args.minValue} ali novejša.`,
  "unavailableDate": `Izbrani datum ni na voljo.`
};

// node_modules/@react-stately/datepicker/dist/sr-SP.mjs
var $7ed9c6fad16a15ec$exports = {};
$7ed9c6fad16a15ec$exports = {
  "rangeOverflow": (args) => `Vrednost mora da bude ${args.maxValue} ili starija.`,
  "rangeReversed": `Datum početka mora biti pre datuma završetka.`,
  "rangeUnderflow": (args) => `Vrednost mora da bude ${args.minValue} ili novija.`,
  "unavailableDate": `Izabrani datum nije dostupan.`
};

// node_modules/@react-stately/datepicker/dist/sv-SE.mjs
var $8bef6d5a236de86c$exports = {};
$8bef6d5a236de86c$exports = {
  "rangeOverflow": (args) => `Värdet måste vara ${args.maxValue} eller tidigare.`,
  "rangeReversed": `Startdatumet måste vara före slutdatumet.`,
  "rangeUnderflow": (args) => `Värdet måste vara ${args.minValue} eller senare.`,
  "unavailableDate": `Det valda datumet är inte tillgängligt.`
};

// node_modules/@react-stately/datepicker/dist/tr-TR.mjs
var $098b9a2d2340cfc5$exports = {};
$098b9a2d2340cfc5$exports = {
  "rangeOverflow": (args) => `Değer, ${args.maxValue} veya öncesi olmalıdır.`,
  "rangeReversed": `Başlangıç tarihi bitiş tarihinden önce olmalıdır.`,
  "rangeUnderflow": (args) => `Değer, ${args.minValue} veya sonrası olmalıdır.`,
  "unavailableDate": `Seçilen tarih kullanılamıyor.`
};

// node_modules/@react-stately/datepicker/dist/uk-UA.mjs
var $54a862ea7fad7419$exports = {};
$54a862ea7fad7419$exports = {
  "rangeOverflow": (args) => `Значення має бути не пізніше ${args.maxValue}.`,
  "rangeReversed": `Дата початку має передувати даті завершення.`,
  "rangeUnderflow": (args) => `Значення має бути не раніше ${args.minValue}.`,
  "unavailableDate": `Вибрана дата недоступна.`
};

// node_modules/@react-stately/datepicker/dist/zh-CN.mjs
var $e6cc491d590dfda5$exports = {};
$e6cc491d590dfda5$exports = {
  "rangeOverflow": (args) => `值必须是 ${args.maxValue} 或更早日期。`,
  "rangeReversed": `开始日期必须早于结束日期。`,
  "rangeUnderflow": (args) => `值必须是 ${args.minValue} 或更晚日期。`,
  "unavailableDate": `所选日期不可用。`
};

// node_modules/@react-stately/datepicker/dist/zh-TW.mjs
var $9aebf53181a474bd$exports = {};
$9aebf53181a474bd$exports = {
  "rangeOverflow": (args) => `值必須是 ${args.maxValue} 或更早。`,
  "rangeReversed": `開始日期必須在結束日期之前。`,
  "rangeUnderflow": (args) => `值必須是 ${args.minValue} 或更晚。`,
  "unavailableDate": `所選日期無法使用。`
};

// node_modules/@react-stately/datepicker/dist/intlStrings.mjs
var $452ac34de8c2444e$exports = {};
$452ac34de8c2444e$exports = {
  "ar-AE": $b3427c06585c22a0$exports,
  "bg-BG": $d282528f459122b9$exports,
  "cs-CZ": $2d5eecd634a9ca45$exports,
  "da-DK": $c8e2288226c24a67$exports,
  "de-DE": $6f5745e389c346d7$exports,
  "el-GR": $8c882ccf4300d1da$exports,
  "en-US": $22195056771860be$exports,
  "es-ES": $cedfa43b4e2a5906$exports,
  "et-EE": $eeeaa8daee3601c7$exports,
  "fi-FI": $35e0614a49b3bb40$exports,
  "fr-FR": $929bc63f7705a78f$exports,
  "he-IL": $9a28d073b034d183$exports,
  "hr-HR": $7743e79780ebcca3$exports,
  "hu-HU": $3351817a04898858$exports,
  "it-IT": $4120bdb1d03484db$exports,
  "ja-JP": $65e5e1569f34ea4f$exports,
  "ko-KR": $d34552a7550967e7$exports,
  "lt-LT": $8f855bffe63f6eca$exports,
  "lv-LV": $ce40f46d09034645$exports,
  "nb-NO": $dd1a9a73340c793e$exports,
  "nl-NL": $4ee1fb3f0cbe6f59$exports,
  "pl-PL": $c85829aebb0bc94b$exports,
  "pt-BR": $27f5cd2291ca8a02$exports,
  "pt-PT": $e046fdccd69bea8e$exports,
  "ro-RO": $fa5f88e804986547$exports,
  "ru-RU": $28e4714602d1b568$exports,
  "sk-SK": $4e3bc8cf783ad569$exports,
  "sl-SI": $bee07513333bdc15$exports,
  "sr-SP": $7ed9c6fad16a15ec$exports,
  "sv-SE": $8bef6d5a236de86c$exports,
  "tr-TR": $098b9a2d2340cfc5$exports,
  "uk-UA": $54a862ea7fad7419$exports,
  "zh-CN": $e6cc491d590dfda5$exports,
  "zh-TW": $9aebf53181a474bd$exports
};

// node_modules/@react-stately/datepicker/dist/utils.mjs
var import_react9 = __toESM(require_react(), 1);
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $35a22f14a1f04b11$var$dictionary = new (0, $5b160d28a433310d$export$c17fa47878dc55b6)((0, $parcel$interopDefault($452ac34de8c2444e$exports)));
function $35a22f14a1f04b11$var$getLocale() {
  return typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
}
function $35a22f14a1f04b11$export$f18627323ab57ac0(value, minValue, maxValue, isDateUnavailable, options) {
  let rangeOverflow = value != null && maxValue != null && value.compare(maxValue) > 0;
  let rangeUnderflow = value != null && minValue != null && value.compare(minValue) < 0;
  let isUnavailable = value != null && (isDateUnavailable === null || isDateUnavailable === void 0 ? void 0 : isDateUnavailable(value)) || false;
  let isInvalid = rangeOverflow || rangeUnderflow || isUnavailable;
  let errors = [];
  if (isInvalid) {
    let locale = $35a22f14a1f04b11$var$getLocale();
    let strings = (0, $5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage("@react-stately/datepicker") || $35a22f14a1f04b11$var$dictionary;
    let formatter = new (0, $6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, strings);
    let dateFormatter = new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, $35a22f14a1f04b11$export$7e319ea407e63bc0({}, options));
    let timeZone = dateFormatter.resolvedOptions().timeZone;
    if (rangeUnderflow)
      errors.push(formatter.format("rangeUnderflow", {
        minValue: dateFormatter.format(minValue.toDate(timeZone))
      }));
    if (rangeOverflow)
      errors.push(formatter.format("rangeOverflow", {
        maxValue: dateFormatter.format(maxValue.toDate(timeZone))
      }));
    if (isUnavailable)
      errors.push(formatter.format("unavailableDate"));
  }
  return {
    isInvalid,
    validationErrors: errors,
    validationDetails: {
      badInput: isUnavailable,
      customError: false,
      patternMismatch: false,
      rangeOverflow,
      rangeUnderflow,
      stepMismatch: false,
      tooLong: false,
      tooShort: false,
      typeMismatch: false,
      valueMissing: false,
      valid: !isInvalid
    }
  };
}
function $35a22f14a1f04b11$export$80ff8fc0ae339c13(value, minValue, maxValue, isDateUnavailable, options) {
  let startValidation = $35a22f14a1f04b11$export$f18627323ab57ac0(value === null || value === void 0 ? void 0 : value.start, minValue, maxValue, isDateUnavailable, options);
  let endValidation = $35a22f14a1f04b11$export$f18627323ab57ac0(value === null || value === void 0 ? void 0 : value.end, minValue, maxValue, isDateUnavailable, options);
  let result = (0, $e5be200c675c3b3a$export$75ee7c75d68f5b0e)(startValidation, endValidation);
  if (value.end != null && value.start != null && value.end.compare(value.start) < 0) {
    let strings = (0, $5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage("@react-stately/datepicker") || $35a22f14a1f04b11$var$dictionary;
    result = (0, $e5be200c675c3b3a$export$75ee7c75d68f5b0e)(result, {
      isInvalid: true,
      validationErrors: [
        strings.getStringForLocale("rangeReversed", $35a22f14a1f04b11$var$getLocale())
      ],
      validationDetails: {
        ...(0, $e5be200c675c3b3a$export$aca958c65c314e6c),
        rangeUnderflow: true,
        rangeOverflow: true,
        valid: false
      }
    });
  }
  return result;
}
var $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS = {
  year: "numeric",
  month: "numeric",
  day: "numeric",
  hour: "numeric",
  minute: "2-digit",
  second: "2-digit"
};
var $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS = {
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
  hour: "2-digit",
  minute: "2-digit",
  second: "2-digit"
};
function $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, options) {
  let defaultFieldOptions = options.shouldForceLeadingZeros ? $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS : $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS;
  fieldOptions = {
    ...defaultFieldOptions,
    ...fieldOptions
  };
  let granularity = options.granularity || "minute";
  let keys = Object.keys(fieldOptions);
  var _options_maxGranularity;
  let startIdx = keys.indexOf((_options_maxGranularity = options.maxGranularity) !== null && _options_maxGranularity !== void 0 ? _options_maxGranularity : "year");
  if (startIdx < 0)
    startIdx = 0;
  let endIdx = keys.indexOf(granularity);
  if (endIdx < 0)
    endIdx = 2;
  if (startIdx > endIdx)
    throw new Error("maxGranularity must be greater than granularity");
  let opts = keys.slice(startIdx, endIdx + 1).reduce((opts2, key) => {
    opts2[key] = fieldOptions[key];
    return opts2;
  }, {});
  if (options.hourCycle != null)
    opts.hour12 = options.hourCycle === 12;
  opts.timeZone = options.timeZone || "UTC";
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  if (hasTime && options.timeZone && !options.hideTimeZone)
    opts.timeZoneName = "short";
  if (options.showEra && startIdx === 0)
    opts.era = "short";
  return opts;
}
function $35a22f14a1f04b11$export$c5221a78ef73c5e9(placeholderValue) {
  if (placeholderValue && "hour" in placeholderValue)
    return placeholderValue;
  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)();
}
function $35a22f14a1f04b11$export$61a490a80c552550(value, calendar) {
  if (value === null)
    return null;
  if (!value)
    return void 0;
  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(value, calendar);
}
function $35a22f14a1f04b11$export$66aa2b09de4b1ea5(placeholderValue, granularity, calendar, timeZone) {
  if (placeholderValue)
    return $35a22f14a1f04b11$export$61a490a80c552550(placeholderValue, calendar);
  let date = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $14e0f24ef4ac5c92$export$461939dd4422153)(timeZone).set({
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  }), calendar);
  if (granularity === "year" || granularity === "month" || granularity === "day")
    return (0, $11d87f3f76e88657$export$93522d1a439f3617)(date);
  if (!timeZone)
    return (0, $11d87f3f76e88657$export$b21e0b124e224484)(date);
  return date;
}
function $35a22f14a1f04b11$export$2440da353cedad43(v, granularity) {
  let defaultTimeZone = v && "timeZone" in v ? v.timeZone : void 0;
  let defaultGranularity = v && "minute" in v ? "minute" : "day";
  if (v && granularity && !(granularity in v))
    throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  let [lastValue, setLastValue] = (0, import_react9.useState)([
    defaultGranularity,
    defaultTimeZone
  ]);
  if (v && (lastValue[0] !== defaultGranularity || lastValue[1] !== defaultTimeZone))
    setLastValue([
      defaultGranularity,
      defaultTimeZone
    ]);
  if (!granularity)
    granularity = v ? defaultGranularity : lastValue[0];
  let timeZone = v ? defaultTimeZone : lastValue[1];
  return [
    granularity,
    timeZone
  ];
}

// node_modules/@react-stately/datepicker/dist/useDatePickerState.mjs
var import_react10 = __toESM(require_react(), 1);
function $ab5bf3f618090389$export$87194bb378cc3ac2(props) {
  let overlayState = (0, $fc909762b330b746$export$61c6a8c84e605fb6)(props);
  let [value, setValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || null, props.onChange);
  let v = value || props.placeholderValue;
  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
  let dateValue = value != null ? value.toDate(defaultTimeZone !== null && defaultTimeZone !== void 0 ? defaultTimeZone : "UTC") : null;
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  var _props_shouldCloseOnSelect;
  let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;
  let [selectedDate, setSelectedDate] = (0, import_react10.useState)(null);
  let [selectedTime, setSelectedTime] = (0, import_react10.useState)(null);
  if (value) {
    selectedDate = value;
    if ("hour" in value)
      selectedTime = value;
  }
  if (v && !(granularity in v))
    throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  let showEra = (value === null || value === void 0 ? void 0 : value.calendar.identifier) === "gregory" && value.era === "BC";
  let formatOpts = (0, import_react10.useMemo)(() => ({
    granularity,
    timeZone: defaultTimeZone,
    hideTimeZone: props.hideTimeZone,
    hourCycle: props.hourCycle,
    shouldForceLeadingZeros: props.shouldForceLeadingZeros,
    showEra
  }), [
    granularity,
    props.hourCycle,
    props.shouldForceLeadingZeros,
    defaultTimeZone,
    props.hideTimeZone,
    showEra
  ]);
  let { minValue, maxValue, isDateUnavailable } = props;
  let builtinValidation = (0, import_react10.useMemo)(() => (0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
    value,
    minValue,
    maxValue,
    isDateUnavailable,
    formatOpts
  ]);
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value,
    builtinValidation
  });
  let isValueInvalid = validation.displayValidation.isInvalid;
  let validationState = props.validationState || (isValueInvalid ? "invalid" : null);
  let commitValue = (date, time) => {
    setValue("timeZone" in time ? time.set((0, $11d87f3f76e88657$export$93522d1a439f3617)(date)) : (0, $11d87f3f76e88657$export$b21e0b124e224484)(date, time));
    setSelectedDate(null);
    setSelectedTime(null);
    validation.commitValidation();
  };
  let selectDate = (newValue) => {
    let shouldClose = typeof shouldCloseOnSelect === "function" ? shouldCloseOnSelect() : shouldCloseOnSelect;
    if (hasTime) {
      if (selectedTime || shouldClose)
        commitValue(newValue, selectedTime || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));
      else
        setSelectedDate(newValue);
    } else {
      setValue(newValue);
      validation.commitValidation();
    }
    if (shouldClose)
      overlayState.setOpen(false);
  };
  let selectTime = (newValue) => {
    if (selectedDate && newValue)
      commitValue(selectedDate, newValue);
    else
      setSelectedTime(newValue);
  };
  return {
    ...validation,
    value,
    setValue,
    dateValue: selectedDate,
    timeValue: selectedTime,
    setDateValue: selectDate,
    setTimeValue: selectTime,
    granularity,
    hasTime,
    ...overlayState,
    setOpen(isOpen) {
      if (!isOpen && !value && selectedDate && hasTime)
        commitValue(selectedDate, selectedTime || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));
      overlayState.setOpen(isOpen);
    },
    validationState,
    isInvalid: isValueInvalid,
    formatValue(locale, fieldOptions) {
      if (!dateValue)
        return "";
      let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);
      let formatter = new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, formatOptions);
      return formatter.format(dateValue);
    }
  };
}

// node_modules/@react-stately/datepicker/dist/placeholders.mjs
var $3e3ed55ab2966714$var$placeholders = new (0, $5b160d28a433310d$export$c17fa47878dc55b6)({
  ach: {
    year: "mwaka",
    month: "dwe",
    day: "nino"
  },
  af: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  am: {
    year: "ዓዓዓዓ",
    month: "ሚሜ",
    day: "ቀቀ"
  },
  an: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  ar: {
    year: "سنة",
    month: "شهر",
    day: "يوم"
  },
  ast: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  az: {
    year: "iiii",
    month: "aa",
    day: "gg"
  },
  be: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  bg: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  bn: {
    year: "yyyy",
    month: "মিমি",
    day: "dd"
  },
  br: {
    year: "bbbb",
    month: "mm",
    day: "dd"
  },
  bs: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  ca: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  cak: {
    year: "jjjj",
    month: "ii",
    day: "q'q'"
  },
  ckb: {
    year: "ساڵ",
    month: "مانگ",
    day: "ڕۆژ"
  },
  cs: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  cy: {
    year: "bbbb",
    month: "mm",
    day: "dd"
  },
  da: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  de: {
    year: "jjjj",
    month: "mm",
    day: "tt"
  },
  dsb: {
    year: "llll",
    month: "mm",
    day: "źź"
  },
  el: {
    year: "εεεε",
    month: "μμ",
    day: "ηη"
  },
  en: {
    year: "yyyy",
    month: "mm",
    day: "dd"
  },
  eo: {
    year: "jjjj",
    month: "mm",
    day: "tt"
  },
  es: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  et: {
    year: "aaaa",
    month: "kk",
    day: "pp"
  },
  eu: {
    year: "uuuu",
    month: "hh",
    day: "ee"
  },
  fa: {
    year: "سال",
    month: "ماه",
    day: "روز"
  },
  ff: {
    year: "hhhh",
    month: "ll",
    day: "ññ"
  },
  fi: {
    year: "vvvv",
    month: "kk",
    day: "pp"
  },
  fr: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  fy: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  ga: {
    year: "bbbb",
    month: "mm",
    day: "ll"
  },
  gd: {
    year: "bbbb",
    month: "mm",
    day: "ll"
  },
  gl: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  he: {
    year: "שנה",
    month: "חודש",
    day: "יום"
  },
  hr: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  hsb: {
    year: "llll",
    month: "mm",
    day: "dd"
  },
  hu: {
    year: "éééé",
    month: "hh",
    day: "nn"
  },
  ia: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  id: {
    year: "tttt",
    month: "bb",
    day: "hh"
  },
  it: {
    year: "aaaa",
    month: "mm",
    day: "gg"
  },
  ja: {
    year: " 年 ",
    month: "月",
    day: "日"
  },
  ka: {
    year: "წწწწ",
    month: "თთ",
    day: "რრ"
  },
  kk: {
    year: "жжжж",
    month: "аа",
    day: "кк"
  },
  kn: {
    year: "ವವವವ",
    month: "ಮಿಮೀ",
    day: "ದಿದಿ"
  },
  ko: {
    year: "연도",
    month: "월",
    day: "일"
  },
  lb: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  lo: {
    year: "ປປປປ",
    month: "ດດ",
    day: "ວວ"
  },
  lt: {
    year: "mmmm",
    month: "mm",
    day: "dd"
  },
  lv: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  meh: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  ml: {
    year: "വർഷം",
    month: "മാസം",
    day: "തീയതി"
  },
  ms: {
    year: "tttt",
    month: "mm",
    day: "hh"
  },
  nl: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  nn: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  no: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  oc: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  pl: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  pt: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  rm: {
    year: "oooo",
    month: "mm",
    day: "dd"
  },
  ro: {
    year: "aaaa",
    month: "ll",
    day: "zz"
  },
  ru: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  sc: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  scn: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  sk: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  sl: {
    year: "llll",
    month: "mm",
    day: "dd"
  },
  sr: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  sv: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  szl: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  tg: {
    year: "сссс",
    month: "мм",
    day: "рр"
  },
  th: {
    year: "ปปปป",
    month: "ดด",
    day: "วว"
  },
  tr: {
    year: "yyyy",
    month: "aa",
    day: "gg"
  },
  uk: {
    year: "рррр",
    month: "мм",
    day: "дд"
  },
  "zh-CN": {
    year: "年",
    month: "月",
    day: "日"
  },
  "zh-TW": {
    year: "年",
    month: "月",
    day: "日"
  }
}, "en");
function $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(field, value, locale) {
  if (field === "era" || field === "dayPeriod")
    return value;
  if (field === "year" || field === "month" || field === "day")
    return $3e3ed55ab2966714$var$placeholders.getStringForLocale(field, locale);
  return "––";
}

// node_modules/@react-stately/datepicker/dist/useDateFieldState.mjs
var import_react11 = __toESM(require_react(), 1);
var $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {
  year: true,
  month: true,
  day: true,
  hour: true,
  minute: true,
  second: true,
  dayPeriod: true,
  era: true
};
var $3c0fc76039f1c516$var$PAGE_STEP = {
  year: 5,
  month: 2,
  day: 7,
  hour: 2,
  minute: 15,
  second: 15
};
var $3c0fc76039f1c516$var$TYPE_MAPPING = {
  dayperiod: "dayPeriod"
};
function $3c0fc76039f1c516$export$60e84778edff6d26(props) {
  let { locale, createCalendar, hideTimeZone, isDisabled, isReadOnly, isRequired, minValue, maxValue, isDateUnavailable } = props;
  let v = props.value || props.defaultValue || props.placeholderValue;
  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
  let timeZone = defaultTimeZone || "UTC";
  if (v && !(granularity in v))
    throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  let defaultFormatter = (0, import_react11.useMemo)(() => new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale), [
    locale
  ]);
  let calendar = (0, import_react11.useMemo)(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [
    createCalendar,
    defaultFormatter
  ]);
  let [value, setDate] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue, props.onChange);
  let calendarValue = (0, import_react11.useMemo)(() => (0, $35a22f14a1f04b11$export$61a490a80c552550)(value, calendar), [
    value,
    calendar
  ]);
  let [placeholderDate, setPlaceholderDate] = (0, import_react11.useState)(() => (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
  let val = calendarValue || placeholderDate;
  let showEra = calendar.identifier === "gregory" && val.era === "BC";
  let formatOpts = (0, import_react11.useMemo)(() => {
    var _props_maxGranularity2;
    return {
      granularity,
      maxGranularity: (_props_maxGranularity2 = props.maxGranularity) !== null && _props_maxGranularity2 !== void 0 ? _props_maxGranularity2 : "year",
      timeZone: defaultTimeZone,
      hideTimeZone,
      hourCycle: props.hourCycle,
      showEra,
      shouldForceLeadingZeros: props.shouldForceLeadingZeros
    };
  }, [
    props.maxGranularity,
    granularity,
    props.hourCycle,
    props.shouldForceLeadingZeros,
    defaultTimeZone,
    hideTimeZone,
    showEra
  ]);
  let opts = (0, import_react11.useMemo)(() => (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)({}, formatOpts), [
    formatOpts
  ]);
  let dateFormatter = (0, import_react11.useMemo)(() => new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, opts), [
    locale,
    opts
  ]);
  let resolvedOptions = (0, import_react11.useMemo)(() => dateFormatter.resolvedOptions(), [
    dateFormatter
  ]);
  let allSegments = (0, import_react11.useMemo)(() => dateFormatter.formatToParts(/* @__PURE__ */ new Date()).filter((seg) => $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg) => (p[seg.type] = true, p), {}), [
    dateFormatter
  ]);
  let [validSegments, setValidSegments] = (0, import_react11.useState)(() => props.value || props.defaultValue ? {
    ...allSegments
  } : {});
  let clearedSegment = (0, import_react11.useRef)();
  let lastCalendarIdentifier = (0, import_react11.useRef)(calendar.identifier);
  (0, import_react11.useEffect)(() => {
    if (calendar.identifier !== lastCalendarIdentifier.current) {
      lastCalendarIdentifier.current = calendar.identifier;
      setPlaceholderDate((placeholder) => Object.keys(validSegments).length > 0 ? (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(placeholder, calendar) : (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
    }
  }, [
    calendar,
    granularity,
    validSegments,
    defaultTimeZone,
    props.placeholderValue
  ]);
  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {
    validSegments = {
      ...allSegments
    };
    setValidSegments(validSegments);
  }
  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {
    validSegments = {};
    setValidSegments(validSegments);
    setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
  }
  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;
  let setValue = (newValue) => {
    if (props.isDisabled || props.isReadOnly)
      return;
    let validKeys = Object.keys(validSegments);
    let allKeys = Object.keys(allSegments);
    if (newValue == null) {
      setDate(null);
      setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
      setValidSegments({});
    } else if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== "dayPeriod") {
      newValue = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
      setDate(newValue);
    } else
      setPlaceholderDate(newValue);
    clearedSegment.current = null;
  };
  let dateValue = (0, import_react11.useMemo)(() => displayValue.toDate(timeZone), [
    displayValue,
    timeZone
  ]);
  let segments = (0, import_react11.useMemo)(() => dateFormatter.formatToParts(dateValue).map((segment) => {
    let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];
    if (segment.type === "era" && calendar.getEras().length === 1)
      isEditable = false;
    let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];
    let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? (0, $3e3ed55ab2966714$export$d3f5c5e0a5023fa0)(segment.type, segment.value, locale) : null;
    return {
      type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,
      text: isPlaceholder ? placeholder : segment.value,
      ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),
      isPlaceholder,
      placeholder,
      isEditable
    };
  }), [
    dateValue,
    validSegments,
    dateFormatter,
    resolvedOptions,
    displayValue,
    calendar,
    locale
  ]);
  if (allSegments.era && validSegments.year && !validSegments.era) {
    validSegments.era = true;
    setValidSegments({
      ...validSegments
    });
  } else if (!allSegments.era && validSegments.era) {
    delete validSegments.era;
    setValidSegments({
      ...validSegments
    });
  }
  let markValid = (part) => {
    validSegments[part] = true;
    if (part === "year" && allSegments.era)
      validSegments.era = true;
    setValidSegments({
      ...validSegments
    });
  };
  let adjustSegment = (type, amount) => {
    if (!validSegments[type]) {
      markValid(type);
      let validKeys = Object.keys(validSegments);
      let allKeys = Object.keys(allSegments);
      if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod)
        setValue(displayValue);
    } else
      setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));
  };
  let builtinValidation = (0, import_react11.useMemo)(() => (0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
    value,
    minValue,
    maxValue,
    isDateUnavailable,
    formatOpts
  ]);
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value,
    builtinValidation
  });
  let isValueInvalid = validation.displayValidation.isInvalid;
  let validationState = props.validationState || (isValueInvalid ? "invalid" : null);
  var _props_maxGranularity;
  return {
    ...validation,
    value: calendarValue,
    dateValue,
    calendar,
    setValue,
    segments,
    dateFormatter,
    validationState,
    isInvalid: isValueInvalid,
    granularity,
    maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : "year",
    isDisabled,
    isReadOnly,
    isRequired,
    increment(part) {
      adjustSegment(part, 1);
    },
    decrement(part) {
      adjustSegment(part, -1);
    },
    incrementPage(part) {
      adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);
    },
    decrementPage(part) {
      adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));
    },
    setSegment(part, v2) {
      markValid(part);
      setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v2, resolvedOptions));
    },
    confirmPlaceholder() {
      if (props.isDisabled || props.isReadOnly)
        return;
      let validKeys = Object.keys(validSegments);
      let allKeys = Object.keys(allSegments);
      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {
        validSegments = {
          ...allSegments
        };
        setValidSegments(validSegments);
        setValue(displayValue.copy());
      }
    },
    clearSegment(part) {
      delete validSegments[part];
      clearedSegment.current = part;
      setValidSegments({
        ...validSegments
      });
      let placeholder = (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone);
      let value2 = displayValue;
      if (part === "dayPeriod" && "hour" in displayValue && "hour" in placeholder) {
        let isPM = displayValue.hour >= 12;
        let shouldBePM = placeholder.hour >= 12;
        if (isPM && !shouldBePM)
          value2 = displayValue.set({
            hour: displayValue.hour - 12
          });
        else if (!isPM && shouldBePM)
          value2 = displayValue.set({
            hour: displayValue.hour + 12
          });
      } else if (part in displayValue)
        value2 = displayValue.set({
          [part]: placeholder[part]
        });
      setDate(null);
      setValue(value2);
    },
    formatValue(fieldOptions) {
      if (!calendarValue)
        return "";
      let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);
      let formatter = new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, formatOptions);
      return formatter.format(dateValue);
    }
  };
}
function $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {
  switch (type) {
    case "era": {
      let eras = date.calendar.getEras();
      return {
        value: eras.indexOf(date.era),
        minValue: 0,
        maxValue: eras.length - 1
      };
    }
    case "year":
      return {
        value: date.year,
        minValue: 1,
        maxValue: date.calendar.getYearsInEra(date)
      };
    case "month":
      return {
        value: date.month,
        minValue: (0, $14e0f24ef4ac5c92$export$5412ac11713b72ad)(date),
        maxValue: date.calendar.getMonthsInYear(date)
      };
    case "day":
      return {
        value: date.day,
        minValue: (0, $14e0f24ef4ac5c92$export$b2f4953d301981d5)(date),
        maxValue: date.calendar.getDaysInMonth(date)
      };
  }
  if ("hour" in date)
    switch (type) {
      case "dayPeriod":
        return {
          value: date.hour >= 12 ? 12 : 0,
          minValue: 0,
          maxValue: 12
        };
      case "hour":
        if (options.hour12) {
          let isPM = date.hour >= 12;
          return {
            value: date.hour,
            minValue: isPM ? 12 : 0,
            maxValue: isPM ? 23 : 11
          };
        }
        return {
          value: date.hour,
          minValue: 0,
          maxValue: 23
        };
      case "minute":
        return {
          value: date.minute,
          minValue: 0,
          maxValue: 59
        };
      case "second":
        return {
          value: date.second,
          minValue: 0,
          maxValue: 59
        };
    }
  return {};
}
function $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {
  switch (part) {
    case "era":
    case "year":
    case "month":
    case "day":
      return value.cycle(part, amount, {
        round: part === "year"
      });
  }
  if ("hour" in value)
    switch (part) {
      case "dayPeriod": {
        let hours = value.hour;
        let isPM = hours >= 12;
        return value.set({
          hour: isPM ? hours - 12 : hours + 12
        });
      }
      case "hour":
      case "minute":
      case "second":
        return value.cycle(part, amount, {
          round: part !== "hour",
          hourCycle: options.hour12 ? 12 : 24
        });
    }
}
function $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {
  switch (part) {
    case "day":
    case "month":
    case "year":
    case "era":
      return value.set({
        [part]: segmentValue
      });
  }
  if ("hour" in value)
    switch (part) {
      case "dayPeriod": {
        let hours = value.hour;
        let wasPM = hours >= 12;
        let isPM = segmentValue >= 12;
        if (isPM === wasPM)
          return value;
        return value.set({
          hour: wasPM ? hours - 12 : hours + 12
        });
      }
      case "hour":
        if (options.hour12) {
          let hours = value.hour;
          let wasPM = hours >= 12;
          if (!wasPM && segmentValue === 12)
            segmentValue = 0;
          if (wasPM && segmentValue < 12)
            segmentValue += 12;
        }
      case "minute":
      case "second":
        return value.set({
          [part]: segmentValue
        });
    }
}

// node_modules/@react-stately/datepicker/dist/useDateRangePickerState.mjs
var import_react12 = __toESM(require_react(), 1);
function $93c38a5e28be6249$export$e50a61c1de9f574(props) {
  var _value_start, _value_end;
  let overlayState = (0, $fc909762b330b746$export$61c6a8c84e605fb6)(props);
  let [controlledValue, setControlledValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || null, props.onChange);
  let [placeholderValue, setPlaceholderValue] = (0, import_react12.useState)(() => controlledValue || {
    start: null,
    end: null
  });
  if (controlledValue == null && placeholderValue.start && placeholderValue.end) {
    placeholderValue = {
      start: null,
      end: null
    };
    setPlaceholderValue(placeholderValue);
  }
  let value = controlledValue || placeholderValue;
  let setValue = (value2) => {
    setPlaceholderValue(value2 || {
      start: null,
      end: null
    });
    if ((value2 === null || value2 === void 0 ? void 0 : value2.start) && value2.end)
      setControlledValue(value2);
    else
      setControlledValue(null);
  };
  let v = (value === null || value === void 0 ? void 0 : value.start) || (value === null || value === void 0 ? void 0 : value.end) || props.placeholderValue;
  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  var _props_shouldCloseOnSelect;
  let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;
  let [dateRange, setSelectedDateRange] = (0, import_react12.useState)(null);
  let [timeRange, setSelectedTimeRange] = (0, import_react12.useState)(null);
  if (value && value.start && value.end) {
    dateRange = value;
    if ("hour" in value.start)
      timeRange = value;
  }
  let commitValue = (dateRange2, timeRange2) => {
    setValue({
      start: "timeZone" in timeRange2.start ? timeRange2.start.set((0, $11d87f3f76e88657$export$93522d1a439f3617)(dateRange2.start)) : (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateRange2.start, timeRange2.start),
      end: "timeZone" in timeRange2.end ? timeRange2.end.set((0, $11d87f3f76e88657$export$93522d1a439f3617)(dateRange2.end)) : (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateRange2.end, timeRange2.end)
    });
    setSelectedDateRange(null);
    setSelectedTimeRange(null);
    validation.commitValidation();
  };
  let setDateRange = (range) => {
    let shouldClose = typeof shouldCloseOnSelect === "function" ? shouldCloseOnSelect() : shouldCloseOnSelect;
    if (hasTime) {
      if (shouldClose || range.start && range.end && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end))
        commitValue(range, {
          start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),
          end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)
        });
      else
        setSelectedDateRange(range);
    } else if (range.start && range.end) {
      setValue(range);
      validation.commitValidation();
    } else
      setSelectedDateRange(range);
    if (shouldClose)
      overlayState.setOpen(false);
  };
  let setTimeRange = (range) => {
    if ((dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && range.start && range.end)
      commitValue(dateRange, range);
    else
      setSelectedTimeRange(range);
  };
  let showEra = (value === null || value === void 0 ? void 0 : (_value_start = value.start) === null || _value_start === void 0 ? void 0 : _value_start.calendar.identifier) === "gregory" && value.start.era === "BC" || (value === null || value === void 0 ? void 0 : (_value_end = value.end) === null || _value_end === void 0 ? void 0 : _value_end.calendar.identifier) === "gregory" && value.end.era === "BC";
  let formatOpts = (0, import_react12.useMemo)(() => ({
    granularity,
    timeZone: defaultTimeZone,
    hideTimeZone: props.hideTimeZone,
    hourCycle: props.hourCycle,
    shouldForceLeadingZeros: props.shouldForceLeadingZeros,
    showEra
  }), [
    granularity,
    props.hourCycle,
    props.shouldForceLeadingZeros,
    defaultTimeZone,
    props.hideTimeZone,
    showEra
  ]);
  let { minValue, maxValue, isDateUnavailable } = props;
  let builtinValidation = (0, import_react12.useMemo)(() => (0, $35a22f14a1f04b11$export$80ff8fc0ae339c13)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
    value,
    minValue,
    maxValue,
    isDateUnavailable,
    formatOpts
  ]);
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: controlledValue,
    name: (0, import_react12.useMemo)(() => [
      props.startName,
      props.endName
    ], [
      props.startName,
      props.endName
    ]),
    builtinValidation
  });
  let isValueInvalid = validation.displayValidation.isInvalid;
  let validationState = props.validationState || (isValueInvalid ? "invalid" : null);
  return {
    ...validation,
    value,
    setValue,
    dateRange,
    timeRange,
    granularity,
    hasTime,
    setDate(part, date) {
      setDateRange({
        ...dateRange,
        [part]: date
      });
    },
    setTime(part, time) {
      setTimeRange({
        ...timeRange,
        [part]: time
      });
    },
    setDateTime(part, dateTime) {
      setValue({
        ...value,
        [part]: dateTime
      });
    },
    setDateRange,
    setTimeRange,
    ...overlayState,
    setOpen(isOpen) {
      if (!isOpen && !((value === null || value === void 0 ? void 0 : value.start) && (value === null || value === void 0 ? void 0 : value.end)) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && hasTime)
        commitValue(dateRange, {
          start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),
          end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)
        });
      overlayState.setOpen(isOpen);
    },
    validationState,
    isInvalid: isValueInvalid,
    formatValue(locale, fieldOptions) {
      if (!value || !value.start || !value.end)
        return null;
      let startTimeZone = "timeZone" in value.start ? value.start.timeZone : void 0;
      let startGranularity = props.granularity || (value.start && "minute" in value.start ? "minute" : "day");
      let endTimeZone = "timeZone" in value.end ? value.end.timeZone : void 0;
      let endGranularity = props.granularity || (value.end && "minute" in value.end ? "minute" : "day");
      let startOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {
        granularity: startGranularity,
        timeZone: startTimeZone,
        hideTimeZone: props.hideTimeZone,
        hourCycle: props.hourCycle,
        showEra: value.start.calendar.identifier === "gregory" && value.start.era === "BC" || value.end.calendar.identifier === "gregory" && value.end.era === "BC"
      });
      let startDate = value.start.toDate(startTimeZone || "UTC");
      let endDate = value.end.toDate(endTimeZone || "UTC");
      let startFormatter = new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, startOptions);
      let endFormatter;
      if (startTimeZone === endTimeZone && startGranularity === endGranularity && value.start.compare(value.end) !== 0) {
        try {
          let parts = startFormatter.formatRangeToParts(startDate, endDate);
          let separatorIndex = -1;
          for (let i = 0; i < parts.length; i++) {
            let part = parts[i];
            if (part.source === "shared" && part.type === "literal")
              separatorIndex = i;
            else if (part.source === "endRange")
              break;
          }
          let start = "";
          let end = "";
          for (let i = 0; i < parts.length; i++) {
            if (i < separatorIndex)
              start += parts[i].value;
            else if (i > separatorIndex)
              end += parts[i].value;
          }
          return {
            start,
            end
          };
        } catch (e) {
        }
        endFormatter = startFormatter;
      } else {
        let endOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {
          granularity: endGranularity,
          timeZone: endTimeZone,
          hideTimeZone: props.hideTimeZone,
          hourCycle: props.hourCycle
        });
        endFormatter = new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, endOptions);
      }
      return {
        start: startFormatter.format(startDate),
        end: endFormatter.format(endDate)
      };
    }
  };
}

// node_modules/@react-stately/datepicker/dist/useTimeFieldState.mjs
var import_react13 = __toESM(require_react(), 1);
function $eff5d8ee529ac4bb$export$fd53cef0cc796101(props) {
  let { placeholderValue = new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)(), minValue, maxValue, granularity, validate } = props;
  let [value, setValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue, props.onChange);
  let v = value || placeholderValue;
  let day = v && "day" in v ? v : void 0;
  let defaultValueTimeZone = props.defaultValue && "timeZone" in props.defaultValue ? props.defaultValue.timeZone : void 0;
  let placeholderDate = (0, import_react13.useMemo)(() => {
    let valueTimeZone = v && "timeZone" in v ? v.timeZone : void 0;
    return (valueTimeZone || defaultValueTimeZone) && placeholderValue ? (0, $11d87f3f76e88657$export$84c95a83c799e074)($eff5d8ee529ac4bb$var$convertValue(placeholderValue), valueTimeZone || defaultValueTimeZone) : $eff5d8ee529ac4bb$var$convertValue(placeholderValue);
  }, [
    placeholderValue,
    v,
    defaultValueTimeZone
  ]);
  let minDate = (0, import_react13.useMemo)(() => $eff5d8ee529ac4bb$var$convertValue(minValue, day), [
    minValue,
    day
  ]);
  let maxDate = (0, import_react13.useMemo)(() => $eff5d8ee529ac4bb$var$convertValue(maxValue, day), [
    maxValue,
    day
  ]);
  let timeValue = (0, import_react13.useMemo)(() => value && "day" in value ? (0, $11d87f3f76e88657$export$d33f79e3ffc3dc83)(value) : value, [
    value
  ]);
  let dateTime = (0, import_react13.useMemo)(() => value == null ? null : $eff5d8ee529ac4bb$var$convertValue(value), [
    value
  ]);
  let onChange = (newValue) => {
    setValue(day || defaultValueTimeZone ? newValue : newValue && (0, $11d87f3f76e88657$export$d33f79e3ffc3dc83)(newValue));
  };
  let state = (0, $3c0fc76039f1c516$export$60e84778edff6d26)({
    ...props,
    value: dateTime,
    defaultValue: void 0,
    minValue: minDate,
    maxValue: maxDate,
    onChange,
    granularity: granularity || "minute",
    maxGranularity: "hour",
    placeholderValue: placeholderDate,
    // Calendar should not matter for time fields.
    createCalendar: () => new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)(),
    validate: (0, import_react13.useCallback)(() => validate === null || validate === void 0 ? void 0 : validate(value), [
      validate,
      value
    ])
  });
  return {
    ...state,
    timeValue
  };
}
function $eff5d8ee529ac4bb$var$convertValue(value, date = (0, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3)((0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)())) {
  if (!value)
    return null;
  if ("day" in value)
    return value;
  return (0, $11d87f3f76e88657$export$b21e0b124e224484)(date, value);
}

// node_modules/@react-stately/dnd/dist/useDraggableCollectionState.mjs
var import_react14 = __toESM(require_react(), 1);
function $b45bbbaf0c3785df$export$29efd034f1d79f81(props) {
  let { getItems, isDisabled, collection, selectionManager, onDragStart, onDragMove, onDragEnd, preview, getAllowedDropOperations } = props;
  let [, setDragging] = (0, import_react14.useState)(false);
  let draggingKeys = (0, import_react14.useRef)(/* @__PURE__ */ new Set());
  let draggedKey = (0, import_react14.useRef)(null);
  let getKeys = (key) => {
    let keys = new Set(selectionManager.isSelected(key) ? new Set([
      ...selectionManager.selectedKeys
    ].filter((key2) => !!collection.getItem(key2))) : []);
    keys.add(key);
    return keys;
  };
  return {
    collection,
    selectionManager,
    get draggedKey() {
      return draggedKey.current;
    },
    get draggingKeys() {
      return draggingKeys.current;
    },
    isDragging(key) {
      return draggingKeys.current.has(key);
    },
    getKeysForDrag: getKeys,
    getItems(key) {
      return getItems(getKeys(key));
    },
    isDisabled,
    preview,
    getAllowedDropOperations,
    startDrag(key, event) {
      let keys = getKeys(key);
      draggingKeys.current = keys;
      draggedKey.current = key;
      selectionManager.setFocused(false);
      setDragging(true);
      if (typeof onDragStart === "function")
        onDragStart({
          ...event,
          keys
        });
    },
    moveDrag(event) {
      if (typeof onDragMove === "function")
        onDragMove({
          ...event,
          keys: draggingKeys.current
        });
    },
    endDrag(event) {
      let { isInternal } = event;
      if (typeof onDragEnd === "function")
        onDragEnd({
          ...event,
          keys: draggingKeys.current,
          isInternal
        });
      draggingKeys.current = /* @__PURE__ */ new Set();
      draggedKey.current = null;
      setDragging(false);
    }
  };
}

// node_modules/@react-stately/dnd/dist/useDroppableCollectionState.mjs
var import_react15 = __toESM(require_react(), 1);
function $e672e8bc247525d1$export$926850f6ecef79d0(props) {
  let { acceptedDragTypes = "all", isDisabled, onInsert, onRootDrop, onItemDrop, onReorder, shouldAcceptItemDrop, collection, selectionManager, onDropEnter, getDropOperation, onDrop } = props;
  let [target, setTarget] = (0, import_react15.useState)(null);
  let targetRef = (0, import_react15.useRef)(null);
  let getOppositeTarget = (target2) => {
    if (target2.dropPosition === "before") {
      let key = collection.getKeyBefore(target2.key);
      return key != null ? {
        type: "item",
        key,
        dropPosition: "after"
      } : null;
    } else if (target2.dropPosition === "after") {
      let key = collection.getKeyAfter(target2.key);
      return key != null ? {
        type: "item",
        key,
        dropPosition: "before"
      } : null;
    }
  };
  let defaultGetDropOperation = (0, import_react15.useCallback)((e) => {
    if (isDisabled)
      return "cancel";
    let { target: target2, types, allowedOperations, isInternal, draggingKeys } = e;
    if (acceptedDragTypes === "all" || acceptedDragTypes.some((type) => types.has(type))) {
      let isValidInsert = onInsert && target2.type === "item" && !isInternal && (target2.dropPosition === "before" || target2.dropPosition === "after");
      let isValidReorder = onReorder && target2.type === "item" && isInternal && (target2.dropPosition === "before" || target2.dropPosition === "after");
      let isValidRootDrop = onRootDrop && target2.type === "root" && !isInternal;
      let isValidOnItemDrop = onItemDrop && target2.type === "item" && target2.dropPosition === "on" && !(isInternal && draggingKeys.has(target2.key)) && (!shouldAcceptItemDrop || shouldAcceptItemDrop(target2, types));
      if (onDrop || isValidInsert || isValidReorder || isValidRootDrop || isValidOnItemDrop) {
        if (getDropOperation)
          return getDropOperation(target2, types, allowedOperations);
        else
          return allowedOperations[0];
      }
    }
    return "cancel";
  }, [
    isDisabled,
    acceptedDragTypes,
    getDropOperation,
    onInsert,
    onRootDrop,
    onItemDrop,
    shouldAcceptItemDrop,
    onReorder,
    onDrop
  ]);
  return {
    collection,
    selectionManager,
    isDisabled,
    target,
    setTarget(newTarget) {
      if (this.isDropTarget(newTarget))
        return;
      let target2 = targetRef.current;
      if (target2 && typeof props.onDropExit === "function")
        props.onDropExit({
          type: "dropexit",
          x: 0,
          y: 0,
          target: target2
        });
      if (newTarget && typeof onDropEnter === "function")
        onDropEnter({
          type: "dropenter",
          x: 0,
          y: 0,
          target: newTarget
        });
      targetRef.current = newTarget;
      setTarget(newTarget);
    },
    isDropTarget(dropTarget) {
      let target2 = targetRef.current;
      if ($e672e8bc247525d1$var$isEqualDropTarget(dropTarget, target2))
        return true;
      if ((dropTarget === null || dropTarget === void 0 ? void 0 : dropTarget.type) === "item" && (target2 === null || target2 === void 0 ? void 0 : target2.type) === "item" && dropTarget.key !== target2.key && dropTarget.dropPosition !== target2.dropPosition && dropTarget.dropPosition !== "on" && target2.dropPosition !== "on")
        return $e672e8bc247525d1$var$isEqualDropTarget(getOppositeTarget(dropTarget), target2) || $e672e8bc247525d1$var$isEqualDropTarget(dropTarget, getOppositeTarget(target2));
      return false;
    },
    getDropOperation(e) {
      return defaultGetDropOperation(e);
    }
  };
}
function $e672e8bc247525d1$var$isEqualDropTarget(a, b) {
  if (!a)
    return !b;
  switch (a.type) {
    case "root":
      return (b === null || b === void 0 ? void 0 : b.type) === "root";
    case "item":
      return (b === null || b === void 0 ? void 0 : b.type) === "item" && (b === null || b === void 0 ? void 0 : b.key) === a.key && (b === null || b === void 0 ? void 0 : b.dropPosition) === a.dropPosition;
  }
}

// node_modules/@react-stately/data/dist/useListData.mjs
var import_react16 = __toESM(require_react(), 1);
function $0d86e9c8f07f9a7b$export$762f73dccccd255d(options) {
  let { initialItems = [], initialSelectedKeys, getKey = (item) => item.id || item.key, filter, initialFilterText = "" } = options;
  let [state, setState] = (0, import_react16.useState)({
    items: initialItems,
    selectedKeys: initialSelectedKeys === "all" ? "all" : new Set(initialSelectedKeys || []),
    filterText: initialFilterText
  });
  let filteredItems = (0, import_react16.useMemo)(() => filter ? state.items.filter((item) => filter(item, state.filterText)) : state.items, [
    state.items,
    state.filterText,
    filter
  ]);
  return {
    ...state,
    items: filteredItems,
    ...$0d86e9c8f07f9a7b$export$79c0c687a5963b0a({
      getKey
    }, setState),
    getItem(key) {
      return state.items.find((item) => getKey(item) === key);
    }
  };
}
function $0d86e9c8f07f9a7b$export$79c0c687a5963b0a(opts, dispatch) {
  let { cursor, getKey } = opts;
  return {
    setSelectedKeys(selectedKeys) {
      dispatch((state) => ({
        ...state,
        selectedKeys
      }));
    },
    setFilterText(filterText) {
      dispatch((state) => ({
        ...state,
        filterText
      }));
    },
    insert(index, ...values) {
      dispatch((state) => $0d86e9c8f07f9a7b$var$insert(state, index, ...values));
    },
    insertBefore(key, ...values) {
      dispatch((state) => {
        let index = state.items.findIndex((item) => getKey(item) === key);
        if (index === -1) {
          if (state.items.length === 0)
            index = 0;
          else
            return state;
        }
        return $0d86e9c8f07f9a7b$var$insert(state, index, ...values);
      });
    },
    insertAfter(key, ...values) {
      dispatch((state) => {
        let index = state.items.findIndex((item) => getKey(item) === key);
        if (index === -1) {
          if (state.items.length === 0)
            index = 0;
          else
            return state;
        }
        return $0d86e9c8f07f9a7b$var$insert(state, index + 1, ...values);
      });
    },
    prepend(...values) {
      dispatch((state) => $0d86e9c8f07f9a7b$var$insert(state, 0, ...values));
    },
    append(...values) {
      dispatch((state) => $0d86e9c8f07f9a7b$var$insert(state, state.items.length, ...values));
    },
    remove(...keys) {
      dispatch((state) => {
        let keySet = new Set(keys);
        let items = state.items.filter((item) => !keySet.has(getKey(item)));
        let selection = "all";
        if (state.selectedKeys !== "all") {
          selection = new Set(state.selectedKeys);
          for (let key of keys)
            selection.delete(key);
        }
        if (cursor == null && items.length === 0)
          selection = /* @__PURE__ */ new Set();
        return {
          ...state,
          items,
          selectedKeys: selection
        };
      });
    },
    removeSelectedItems() {
      dispatch((state) => {
        if (state.selectedKeys === "all")
          return {
            ...state,
            items: [],
            selectedKeys: /* @__PURE__ */ new Set()
          };
        let selectedKeys = state.selectedKeys;
        let items = state.items.filter((item) => !selectedKeys.has(getKey(item)));
        return {
          ...state,
          items,
          selectedKeys: /* @__PURE__ */ new Set()
        };
      });
    },
    move(key, toIndex) {
      dispatch((state) => {
        let index = state.items.findIndex((item2) => getKey(item2) === key);
        if (index === -1)
          return state;
        let copy = state.items.slice();
        let [item] = copy.splice(index, 1);
        copy.splice(toIndex, 0, item);
        return {
          ...state,
          items: copy
        };
      });
    },
    moveBefore(key, keys) {
      dispatch((state) => {
        let toIndex = state.items.findIndex((item) => getKey(item) === key);
        if (toIndex === -1)
          return state;
        let keyArray = Array.isArray(keys) ? keys : [
          ...keys
        ];
        let indices = keyArray.map((key2) => state.items.findIndex((item) => getKey(item) === key2)).sort((a, b) => a - b);
        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex);
      });
    },
    moveAfter(key, keys) {
      dispatch((state) => {
        let toIndex = state.items.findIndex((item) => getKey(item) === key);
        if (toIndex === -1)
          return state;
        let keyArray = Array.isArray(keys) ? keys : [
          ...keys
        ];
        let indices = keyArray.map((key2) => state.items.findIndex((item) => getKey(item) === key2)).sort((a, b) => a - b);
        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex + 1);
      });
    },
    update(key, newValue) {
      dispatch((state) => {
        let index = state.items.findIndex((item) => getKey(item) === key);
        if (index === -1)
          return state;
        return {
          ...state,
          items: [
            ...state.items.slice(0, index),
            newValue,
            ...state.items.slice(index + 1)
          ]
        };
      });
    }
  };
}
function $0d86e9c8f07f9a7b$var$insert(state, index, ...values) {
  return {
    ...state,
    items: [
      ...state.items.slice(0, index),
      ...values,
      ...state.items.slice(index)
    ]
  };
}
function $0d86e9c8f07f9a7b$var$move(state, indices, toIndex) {
  toIndex -= indices.filter((index) => index < toIndex).length;
  let moves = indices.map((from) => ({
    from,
    to: toIndex++
  }));
  for (let i = 0; i < moves.length; i++) {
    let a = moves[i].from;
    for (let j = i; j < moves.length; j++) {
      let b = moves[j].from;
      if (b > a)
        moves[j].from--;
    }
  }
  for (let i = 0; i < moves.length; i++) {
    let a = moves[i];
    for (let j = moves.length - 1; j > i; j--) {
      let b = moves[j];
      if (b.from < a.to)
        a.to++;
      else
        b.from++;
    }
  }
  let copy = state.items.slice();
  for (let move of moves) {
    let [item] = copy.splice(move.from, 1);
    copy.splice(move.to, 0, item);
  }
  return {
    ...state,
    items: copy
  };
}

// node_modules/@react-stately/data/dist/useAsyncList.mjs
var import_react17 = __toESM(require_react(), 1);
function $f86e6c1ec7da6ebb$var$reducer(data, action) {
  let selectedKeys;
  switch (data.state) {
    case "idle":
    case "error":
      switch (action.type) {
        case "loading":
        case "loadingMore":
        case "sorting":
        case "filtering":
          var _action_filterText, _action_sortDescriptor;
          return {
            ...data,
            filterText: (_action_filterText = action.filterText) !== null && _action_filterText !== void 0 ? _action_filterText : data.filterText,
            state: action.type,
            // Reset items to an empty list if loading, but not when sorting.
            items: action.type === "loading" ? [] : data.items,
            sortDescriptor: (_action_sortDescriptor = action.sortDescriptor) !== null && _action_sortDescriptor !== void 0 ? _action_sortDescriptor : data.sortDescriptor,
            abortController: action.abortController
          };
        case "update":
          return {
            ...data,
            ...action.updater(data)
          };
        case "success":
        case "error":
          return data;
        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }
    case "loading":
    case "sorting":
    case "filtering":
      switch (action.type) {
        case "success":
          if (action.abortController !== data.abortController)
            return data;
          var _action_selectedKeys;
          selectedKeys = (_action_selectedKeys = action.selectedKeys) !== null && _action_selectedKeys !== void 0 ? _action_selectedKeys : data.selectedKeys;
          var _action_filterText1, _action_sortDescriptor1;
          return {
            ...data,
            filterText: (_action_filterText1 = action.filterText) !== null && _action_filterText1 !== void 0 ? _action_filterText1 : data.filterText,
            state: "idle",
            items: [
              ...action.items
            ],
            selectedKeys: selectedKeys === "all" ? "all" : new Set(selectedKeys),
            sortDescriptor: (_action_sortDescriptor1 = action.sortDescriptor) !== null && _action_sortDescriptor1 !== void 0 ? _action_sortDescriptor1 : data.sortDescriptor,
            abortController: null,
            cursor: action.cursor
          };
        case "error":
          if (action.abortController !== data.abortController)
            return data;
          return {
            ...data,
            state: "error",
            error: action.error,
            abortController: null
          };
        case "loading":
        case "loadingMore":
        case "sorting":
        case "filtering":
          data.abortController.abort();
          var _action_filterText2;
          return {
            ...data,
            filterText: (_action_filterText2 = action.filterText) !== null && _action_filterText2 !== void 0 ? _action_filterText2 : data.filterText,
            state: action.type,
            // Reset items to an empty list if loading, but not when sorting.
            items: action.type === "loading" ? [] : data.items,
            abortController: action.abortController
          };
        case "update":
          return {
            ...data,
            ...action.updater(data)
          };
        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }
    case "loadingMore":
      switch (action.type) {
        case "success":
          var _action_selectedKeys1;
          selectedKeys = data.selectedKeys === "all" || action.selectedKeys === "all" ? "all" : /* @__PURE__ */ new Set([
            ...data.selectedKeys,
            ...(_action_selectedKeys1 = action.selectedKeys) !== null && _action_selectedKeys1 !== void 0 ? _action_selectedKeys1 : []
          ]);
          var _action_sortDescriptor2;
          return {
            ...data,
            state: "idle",
            items: [
              ...data.items,
              ...action.items
            ],
            selectedKeys,
            sortDescriptor: (_action_sortDescriptor2 = action.sortDescriptor) !== null && _action_sortDescriptor2 !== void 0 ? _action_sortDescriptor2 : data.sortDescriptor,
            abortController: null,
            cursor: action.cursor
          };
        case "error":
          if (action.abortController !== data.abortController)
            return data;
          return {
            ...data,
            state: "error",
            error: action.error
          };
        case "loading":
        case "sorting":
        case "filtering":
          data.abortController.abort();
          var _action_filterText3;
          return {
            ...data,
            filterText: (_action_filterText3 = action.filterText) !== null && _action_filterText3 !== void 0 ? _action_filterText3 : data.filterText,
            state: action.type,
            // Reset items to an empty list if loading, but not when sorting.
            items: action.type === "loading" ? [] : data.items,
            abortController: action.abortController
          };
        case "loadingMore":
          action.abortController.abort();
          return data;
        case "update":
          return {
            ...data,
            ...action.updater(data)
          };
        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }
    default:
      throw new Error(`Invalid state "${data.state}"`);
  }
}
function $f86e6c1ec7da6ebb$export$bc3384a35de93d66(options) {
  const { load, sort, initialSelectedKeys, initialSortDescriptor, getKey = (item) => item.id || item.key, initialFilterText = "" } = options;
  let [data, dispatch] = (0, import_react17.useReducer)($f86e6c1ec7da6ebb$var$reducer, {
    state: "idle",
    error: null,
    items: [],
    selectedKeys: initialSelectedKeys === "all" ? "all" : new Set(initialSelectedKeys),
    sortDescriptor: initialSortDescriptor,
    filterText: initialFilterText
  });
  const dispatchFetch = async (action, fn) => {
    let abortController = new AbortController();
    try {
      dispatch({
        ...action,
        abortController
      });
      var _action_filterText;
      let previousFilterText = (_action_filterText = action.filterText) !== null && _action_filterText !== void 0 ? _action_filterText : data.filterText;
      var _action_sortDescriptor;
      let response = await fn({
        items: data.items.slice(),
        selectedKeys: data.selectedKeys,
        sortDescriptor: (_action_sortDescriptor = action.sortDescriptor) !== null && _action_sortDescriptor !== void 0 ? _action_sortDescriptor : data.sortDescriptor,
        signal: abortController.signal,
        cursor: action.type === "loadingMore" ? data.cursor : null,
        filterText: previousFilterText
      });
      var _response_filterText;
      let filterText = (_response_filterText = response.filterText) !== null && _response_filterText !== void 0 ? _response_filterText : previousFilterText;
      dispatch({
        type: "success",
        ...response,
        abortController
      });
      if (filterText && filterText !== previousFilterText && !abortController.signal.aborted)
        dispatchFetch({
          type: "filtering",
          filterText
        }, load);
    } catch (e) {
      dispatch({
        type: "error",
        error: e,
        abortController
      });
    }
  };
  let didDispatchInitialFetch = (0, import_react17.useRef)(false);
  (0, import_react17.useEffect)(() => {
    if (!didDispatchInitialFetch.current) {
      dispatchFetch({
        type: "loading"
      }, load);
      didDispatchInitialFetch.current = true;
    }
  }, []);
  return {
    items: data.items,
    selectedKeys: data.selectedKeys,
    sortDescriptor: data.sortDescriptor,
    isLoading: data.state === "loading" || data.state === "loadingMore" || data.state === "sorting" || data.state === "filtering",
    loadingState: data.state,
    error: data.error,
    filterText: data.filterText,
    getItem(key) {
      return data.items.find((item) => getKey(item) === key);
    },
    reload() {
      dispatchFetch({
        type: "loading"
      }, load);
    },
    loadMore() {
      if (data.state === "loadingMore" || data.state === "filtering" || data.cursor == null)
        return;
      dispatchFetch({
        type: "loadingMore"
      }, load);
    },
    sort(sortDescriptor) {
      dispatchFetch({
        type: "sorting",
        sortDescriptor
      }, sort || load);
    },
    ...(0, $0d86e9c8f07f9a7b$export$79c0c687a5963b0a)({
      ...options,
      getKey,
      cursor: data.cursor
    }, (fn) => {
      dispatch({
        type: "update",
        updater: fn
      });
    }),
    setFilterText(filterText) {
      dispatchFetch({
        type: "filtering",
        filterText
      }, load);
    }
  };
}

// node_modules/@react-stately/data/dist/useTreeData.mjs
var import_react18 = __toESM(require_react(), 1);
function $be2ea0343af54212$export$d14e1352e21f4a16(options) {
  let { initialItems = [], initialSelectedKeys, getKey = (item) => item.id || item.key, getChildren = (item) => item.children } = options;
  let [tree, setItems] = (0, import_react18.useState)(() => buildTree(initialItems, /* @__PURE__ */ new Map()));
  let { items, nodeMap } = tree;
  let [selectedKeys, setSelectedKeys] = (0, import_react18.useState)(new Set(initialSelectedKeys || []));
  function buildTree(initialItems2 = [], map, parentKey) {
    return {
      items: initialItems2.map((item) => {
        let node = {
          key: getKey(item),
          parentKey,
          value: item,
          children: null
        };
        node.children = buildTree(getChildren(item), map, node.key).items;
        map.set(node.key, node);
        return node;
      }),
      nodeMap: map
    };
  }
  function updateTree(items2, key, update, originalMap) {
    let node = originalMap.get(key);
    if (!node)
      return {
        items: items2,
        nodeMap: originalMap
      };
    let map = new Map(originalMap);
    let newNode = update(node);
    if (newNode == null)
      deleteNode(node, map);
    else
      addNode(newNode, map);
    while (node.parentKey) {
      let nextParent = map.get(node.parentKey);
      let copy = {
        key: nextParent.key,
        parentKey: nextParent.parentKey,
        value: nextParent.value,
        children: null
      };
      let children = nextParent.children;
      if (newNode == null)
        children = children.filter((c) => c !== node);
      copy.children = children.map((child) => {
        if (child === node)
          return newNode;
        return child;
      });
      map.set(copy.key, copy);
      newNode = copy;
      node = nextParent;
    }
    if (newNode == null)
      items2 = items2.filter((c) => c !== node);
    return {
      items: items2.map((item) => {
        if (item === node)
          return newNode;
        return item;
      }),
      nodeMap: map
    };
  }
  function addNode(node, map) {
    map.set(node.key, node);
    for (let child of node.children)
      addNode(child, map);
  }
  function deleteNode(node, map) {
    map.delete(node.key);
    for (let child of node.children)
      deleteNode(child, map);
  }
  return {
    items,
    selectedKeys,
    setSelectedKeys,
    getItem(key) {
      return nodeMap.get(key);
    },
    insert(parentKey, index, ...values) {
      setItems(({ items: items2, nodeMap: originalMap }) => {
        let { items: newNodes, nodeMap: newMap } = buildTree(values, originalMap, parentKey);
        if (parentKey == null)
          return {
            items: [
              ...items2.slice(0, index),
              ...newNodes,
              ...items2.slice(index)
            ],
            nodeMap: newMap
          };
        return updateTree(items2, parentKey, (parentNode) => ({
          key: parentNode.key,
          parentKey: parentNode.parentKey,
          value: parentNode.value,
          children: [
            ...parentNode.children.slice(0, index),
            ...newNodes,
            ...parentNode.children.slice(index)
          ]
        }), newMap);
      });
    },
    insertBefore(key, ...values) {
      let node = nodeMap.get(key);
      if (!node)
        return;
      let parentNode = nodeMap.get(node.parentKey);
      let nodes = parentNode ? parentNode.children : items;
      let index = nodes.indexOf(node);
      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index, ...values);
    },
    insertAfter(key, ...values) {
      let node = nodeMap.get(key);
      if (!node)
        return;
      let parentNode = nodeMap.get(node.parentKey);
      let nodes = parentNode ? parentNode.children : items;
      let index = nodes.indexOf(node);
      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index + 1, ...values);
    },
    prepend(parentKey, ...values) {
      this.insert(parentKey, 0, ...values);
    },
    append(parentKey, ...values) {
      if (parentKey == null)
        this.insert(null, items.length, ...values);
      else {
        let parentNode = nodeMap.get(parentKey);
        if (!parentNode)
          return;
        this.insert(parentKey, parentNode.children.length, ...values);
      }
    },
    remove(...keys) {
      if (keys.length === 0)
        return;
      let newItems = items;
      let prevMap = nodeMap;
      let newTree;
      for (let key of keys) {
        newTree = updateTree(newItems, key, () => null, prevMap);
        prevMap = newTree.nodeMap;
        newItems = newTree.items;
      }
      setItems(newTree);
      let selection = new Set(selectedKeys);
      for (let key of selectedKeys)
        if (!newTree.nodeMap.has(key))
          selection.delete(key);
      setSelectedKeys(selection);
    },
    removeSelectedItems() {
      this.remove(...selectedKeys);
    },
    move(key, toParentKey, index) {
      setItems(({ items: items2, nodeMap: originalMap }) => {
        let node = originalMap.get(key);
        if (!node)
          return {
            items: items2,
            nodeMap: originalMap
          };
        let { items: newItems, nodeMap: newMap } = updateTree(items2, key, () => null, originalMap);
        const movedNode = {
          ...node,
          parentKey: toParentKey
        };
        if (toParentKey == null) {
          newMap.set(movedNode.key, movedNode);
          return {
            items: [
              ...newItems.slice(0, index),
              movedNode,
              ...newItems.slice(index)
            ],
            nodeMap: newMap
          };
        }
        return updateTree(newItems, toParentKey, (parentNode) => ({
          key: parentNode.key,
          parentKey: parentNode.parentKey,
          value: parentNode.value,
          children: [
            ...parentNode.children.slice(0, index),
            movedNode,
            ...parentNode.children.slice(index)
          ]
        }), newMap);
      });
    },
    update(oldKey, newValue) {
      setItems(({ items: items2, nodeMap: originalMap }) => updateTree(items2, oldKey, (oldNode) => {
        let node = {
          key: oldNode.key,
          parentKey: oldNode.parentKey,
          value: newValue,
          children: null
        };
        let tree2 = buildTree(getChildren(newValue), originalMap, node.key);
        node.children = tree2.items;
        return node;
      }, originalMap));
    }
  };
}

// node_modules/@react-stately/menu/dist/useMenuTriggerState.mjs
var import_react19 = __toESM(require_react(), 1);
function $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {
  let overlayTriggerState = (0, $fc909762b330b746$export$61c6a8c84e605fb6)(props);
  let [focusStrategy, setFocusStrategy] = (0, import_react19.useState)(null);
  let [expandedKeysStack, setExpandedKeysStack] = (0, import_react19.useState)([]);
  let closeAll = () => {
    setExpandedKeysStack([]);
    overlayTriggerState.close();
  };
  let openSubmenu = (triggerKey, level) => {
    setExpandedKeysStack((oldStack) => {
      if (level > oldStack.length)
        return oldStack;
      return [
        ...oldStack.slice(0, level),
        triggerKey
      ];
    });
  };
  let closeSubmenu = (triggerKey, level) => {
    setExpandedKeysStack((oldStack) => {
      let key = oldStack[level];
      if (key === triggerKey)
        return oldStack.slice(0, level);
      else
        return oldStack;
    });
  };
  return {
    focusStrategy,
    ...overlayTriggerState,
    open(focusStrategy2 = null) {
      setFocusStrategy(focusStrategy2);
      overlayTriggerState.open();
    },
    toggle(focusStrategy2 = null) {
      setFocusStrategy(focusStrategy2);
      overlayTriggerState.toggle();
    },
    close() {
      closeAll();
    },
    expandedKeysStack,
    openSubmenu,
    closeSubmenu
  };
}

// node_modules/@react-stately/menu/dist/useSubmenuTriggerState.mjs
var import_react20 = __toESM(require_react(), 1);
function $e5614764aa47eb35$export$cfc51cf86138bf98(props, state) {
  let { triggerKey } = props;
  let { expandedKeysStack, openSubmenu, closeSubmenu, close: closeAll } = state;
  let [submenuLevel] = (0, import_react20.useState)(expandedKeysStack === null || expandedKeysStack === void 0 ? void 0 : expandedKeysStack.length);
  let isOpen = (0, import_react20.useMemo)(() => expandedKeysStack[submenuLevel] === triggerKey, [
    expandedKeysStack,
    triggerKey,
    submenuLevel
  ]);
  let [focusStrategy, setFocusStrategy] = (0, import_react20.useState)(null);
  let open = (0, import_react20.useCallback)((focusStrategy2 = null) => {
    setFocusStrategy(focusStrategy2);
    openSubmenu(triggerKey, submenuLevel);
  }, [
    openSubmenu,
    submenuLevel,
    triggerKey
  ]);
  let close = (0, import_react20.useCallback)(() => {
    setFocusStrategy(null);
    closeSubmenu(triggerKey, submenuLevel);
  }, [
    closeSubmenu,
    submenuLevel,
    triggerKey
  ]);
  let toggle = (0, import_react20.useCallback)((focusStrategy2 = null) => {
    setFocusStrategy(focusStrategy2);
    if (isOpen)
      close();
    else
      open(focusStrategy2);
  }, [
    close,
    open,
    isOpen
  ]);
  return (0, import_react20.useMemo)(() => ({
    focusStrategy,
    isOpen,
    open,
    close,
    closeAll,
    submenuLevel,
    // TODO: Placeholders that aren't used but give us parity with OverlayTriggerState so we can use this in Popover. Refactor if we update Popover via
    // https://github.com/adobe/react-spectrum/pull/4976#discussion_r1336472863
    setOpen: () => {
    },
    toggle
  }), [
    isOpen,
    open,
    close,
    closeAll,
    focusStrategy,
    toggle,
    submenuLevel
  ]);
}

// node_modules/@react-stately/numberfield/dist/useNumberFieldState.mjs
var import_react21 = __toESM(require_react(), 1);
function $de67e98908f0c6ee$export$7f629e9dc1ecf37c(props) {
  let { minValue, maxValue, step, formatOptions, value, defaultValue = NaN, onChange, locale, isDisabled, isReadOnly } = props;
  if (value === null)
    value = NaN;
  if (value !== void 0 && !isNaN(value)) {
    if (step !== void 0 && !isNaN(step))
      value = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(value, minValue, maxValue, step);
    else
      value = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(value, minValue, maxValue);
  }
  if (!isNaN(defaultValue)) {
    if (step !== void 0 && !isNaN(step))
      defaultValue = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(defaultValue, minValue, maxValue, step);
    else
      defaultValue = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(defaultValue, minValue, maxValue);
  }
  let [numberValue, setNumberValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(value, isNaN(defaultValue) ? NaN : defaultValue, onChange);
  let [inputValue, setInputValue] = (0, import_react21.useState)(() => isNaN(numberValue) ? "" : new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, formatOptions).format(numberValue));
  let numberParser = (0, import_react21.useMemo)(() => new (0, $6c7bd7858deea686$export$cd11ab140839f11d)(locale, formatOptions), [
    locale,
    formatOptions
  ]);
  let numberingSystem = (0, import_react21.useMemo)(() => numberParser.getNumberingSystem(inputValue), [
    numberParser,
    inputValue
  ]);
  let formatter = (0, import_react21.useMemo)(() => new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, {
    ...formatOptions,
    numberingSystem
  }), [
    locale,
    formatOptions,
    numberingSystem
  ]);
  let intlOptions = (0, import_react21.useMemo)(() => formatter.resolvedOptions(), [
    formatter
  ]);
  let format = (0, import_react21.useCallback)((value2) => isNaN(value2) || value2 === null ? "" : formatter.format(value2), [
    formatter
  ]);
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: numberValue
  });
  let clampStep = step !== void 0 && !isNaN(step) ? step : 1;
  if (intlOptions.style === "percent" && (step === void 0 || isNaN(step)))
    clampStep = 0.01;
  let [prevValue, setPrevValue] = (0, import_react21.useState)(numberValue);
  let [prevLocale, setPrevLocale] = (0, import_react21.useState)(locale);
  let [prevFormatOptions, setPrevFormatOptions] = (0, import_react21.useState)(formatOptions);
  if (!Object.is(numberValue, prevValue) || locale !== prevLocale || formatOptions !== prevFormatOptions) {
    setInputValue(format(numberValue));
    setPrevValue(numberValue);
    setPrevLocale(locale);
    setPrevFormatOptions(formatOptions);
  }
  let parsedValue = (0, import_react21.useMemo)(() => numberParser.parse(inputValue), [
    numberParser,
    inputValue
  ]);
  let commit = () => {
    if (!inputValue.length) {
      setNumberValue(NaN);
      setInputValue(value === void 0 ? "" : format(numberValue));
      return;
    }
    if (isNaN(parsedValue)) {
      setInputValue(format(numberValue));
      return;
    }
    let clampedValue;
    if (step === void 0 || isNaN(step))
      clampedValue = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(parsedValue, minValue, maxValue);
    else
      clampedValue = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, step);
    clampedValue = numberParser.parse(format(clampedValue));
    setNumberValue(clampedValue);
    setInputValue(format(value === void 0 ? clampedValue : numberValue));
  };
  let safeNextStep = (operation, minMax = 0) => {
    let prev = parsedValue;
    if (isNaN(prev)) {
      let newValue = isNaN(minMax) ? 0 : minMax;
      return (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(newValue, minValue, maxValue, clampStep);
    } else {
      let newValue = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(prev, minValue, maxValue, clampStep);
      if (operation === "+" && newValue > prev || operation === "-" && newValue < prev)
        return newValue;
      return (0, $9446cca9a3875146$export$cb6e0bb50bc19463)($de67e98908f0c6ee$var$handleDecimalOperation(operation, prev, clampStep), minValue, maxValue, clampStep);
    }
  };
  let increment = () => {
    let newValue = safeNextStep("+", minValue);
    if (newValue === numberValue)
      setInputValue(format(newValue));
    setNumberValue(newValue);
    validation.commitValidation();
  };
  let decrement = () => {
    let newValue = safeNextStep("-", maxValue);
    if (newValue === numberValue)
      setInputValue(format(newValue));
    setNumberValue(newValue);
    validation.commitValidation();
  };
  let incrementToMax = () => {
    if (maxValue != null) {
      setNumberValue((0, $9446cca9a3875146$export$cb6e0bb50bc19463)(maxValue, minValue, maxValue, clampStep));
      validation.commitValidation();
    }
  };
  let decrementToMin = () => {
    if (minValue != null) {
      setNumberValue(minValue);
      validation.commitValidation();
    }
  };
  let canIncrement = (0, import_react21.useMemo)(() => !isDisabled && !isReadOnly && (isNaN(parsedValue) || maxValue === void 0 || isNaN(maxValue) || (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, clampStep) > parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation("+", parsedValue, clampStep) <= maxValue), [
    isDisabled,
    isReadOnly,
    minValue,
    maxValue,
    clampStep,
    parsedValue
  ]);
  let canDecrement = (0, import_react21.useMemo)(() => !isDisabled && !isReadOnly && (isNaN(parsedValue) || minValue === void 0 || isNaN(minValue) || (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, clampStep) < parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation("-", parsedValue, clampStep) >= minValue), [
    isDisabled,
    isReadOnly,
    minValue,
    maxValue,
    clampStep,
    parsedValue
  ]);
  let validate = (value2) => numberParser.isValidPartialNumber(value2, minValue, maxValue);
  return {
    ...validation,
    validate,
    increment,
    incrementToMax,
    decrement,
    decrementToMin,
    canIncrement,
    canDecrement,
    minValue,
    maxValue,
    numberValue: parsedValue,
    setNumberValue,
    setInputValue,
    inputValue,
    commit
  };
}
function $de67e98908f0c6ee$var$handleDecimalOperation(operator, value1, value2) {
  let result = operator === "+" ? value1 + value2 : value1 - value2;
  if (value1 % 1 !== 0 || value2 % 1 !== 0) {
    const value1Decimal = value1.toString().split(".");
    const value2Decimal = value2.toString().split(".");
    const value1DecimalLength = value1Decimal[1] && value1Decimal[1].length || 0;
    const value2DecimalLength = value2Decimal[1] && value2Decimal[1].length || 0;
    const multiplier = Math.pow(10, Math.max(value1DecimalLength, value2DecimalLength));
    value1 = Math.round(value1 * multiplier);
    value2 = Math.round(value2 * multiplier);
    result = operator === "+" ? value1 + value2 : value1 - value2;
    result /= multiplier;
  }
  return result;
}

// node_modules/@react-stately/radio/dist/useRadioGroupState.mjs
var import_react22 = __toESM(require_react(), 1);
var $a54cdc5c1942b639$var$instance = Math.round(Math.random() * 1e10);
var $a54cdc5c1942b639$var$i = 0;
function $a54cdc5c1942b639$export$bca9d026f8e704eb(props) {
  let name = (0, import_react22.useMemo)(() => props.name || `radio-group-${$a54cdc5c1942b639$var$instance}-${++$a54cdc5c1942b639$var$i}`, [
    props.name
  ]);
  var _props_defaultValue;
  let [selectedValue, setSelected] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, (_props_defaultValue = props.defaultValue) !== null && _props_defaultValue !== void 0 ? _props_defaultValue : null, props.onChange);
  let [lastFocusedValue, setLastFocusedValue] = (0, import_react22.useState)(null);
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: selectedValue
  });
  let setSelectedValue = (value) => {
    if (!props.isReadOnly && !props.isDisabled) {
      setSelected(value);
      validation.commitValidation();
    }
  };
  let isInvalid = validation.displayValidation.isInvalid;
  return {
    ...validation,
    name,
    selectedValue,
    setSelectedValue,
    lastFocusedValue,
    setLastFocusedValue,
    isDisabled: props.isDisabled || false,
    isReadOnly: props.isReadOnly || false,
    isRequired: props.isRequired || false,
    validationState: props.validationState || (isInvalid ? "invalid" : null),
    isInvalid
  };
}

// node_modules/@react-stately/searchfield/dist/useSearchFieldState.mjs
function $0b2218c4e3fe7d7e$export$3f8be18b0f41eaf2(props) {
  let [value, setValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)($0b2218c4e3fe7d7e$var$toString(props.value), $0b2218c4e3fe7d7e$var$toString(props.defaultValue) || "", props.onChange);
  return {
    value,
    setValue
  };
}
function $0b2218c4e3fe7d7e$var$toString(val) {
  if (val == null)
    return;
  return val.toString();
}

// node_modules/@react-stately/select/dist/useSelectState.mjs
var import_react23 = __toESM(require_react(), 1);
function $2bc3a590c5373a4e$export$5159ec8b34d4ec12(props) {
  let triggerState = (0, $fc909762b330b746$export$61c6a8c84e605fb6)(props);
  let [focusStrategy, setFocusStrategy] = (0, import_react23.useState)(null);
  let listState = (0, $a0d645289fe9b86b$export$e7f05e985daf4b5f)({
    ...props,
    onSelectionChange: (key) => {
      if (props.onSelectionChange != null)
        props.onSelectionChange(key);
      triggerState.close();
      validationState.commitValidation();
    }
  });
  let validationState = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: listState.selectedKey
  });
  let [isFocused, setFocused] = (0, import_react23.useState)(false);
  return {
    ...validationState,
    ...listState,
    ...triggerState,
    focusStrategy,
    open(focusStrategy2 = null) {
      if (listState.collection.size !== 0) {
        setFocusStrategy(focusStrategy2);
        triggerState.open();
      }
    },
    toggle(focusStrategy2 = null) {
      if (listState.collection.size !== 0) {
        setFocusStrategy(focusStrategy2);
        triggerState.toggle();
      }
    },
    isFocused,
    setFocused
  };
}

// node_modules/@react-stately/slider/dist/useSliderState.mjs
var import_react24 = __toESM(require_react(), 1);
var $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE = 0;
var $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE = 100;
var $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE = 1;
function $28f99e3e86e6ec45$export$e5fda3247f5d67f9(props) {
  const { isDisabled = false, minValue = $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE, maxValue = $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE, numberFormatter: formatter, step = $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE, orientation = "horizontal" } = props;
  let pageSize = (0, import_react24.useMemo)(() => {
    let calcPageSize = (maxValue - minValue) / 10;
    calcPageSize = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(calcPageSize, 0, calcPageSize + step, step);
    return Math.max(calcPageSize, step);
  }, [
    step,
    maxValue,
    minValue
  ]);
  let restrictValues = (0, import_react24.useCallback)((values2) => values2 === null || values2 === void 0 ? void 0 : values2.map((val, idx) => {
    let min = idx === 0 ? minValue : val[idx - 1];
    let max = idx === values2.length - 1 ? maxValue : val[idx + 1];
    return (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(val, min, max, step);
  }), [
    minValue,
    maxValue,
    step
  ]);
  let value = (0, import_react24.useMemo)(() => restrictValues($28f99e3e86e6ec45$var$convertValue(props.value)), [
    props.value
  ]);
  let defaultValue = (0, import_react24.useMemo)(() => {
    var _convertValue;
    return restrictValues((_convertValue = $28f99e3e86e6ec45$var$convertValue(props.defaultValue)) !== null && _convertValue !== void 0 ? _convertValue : [
      minValue
    ]);
  }, [
    props.defaultValue,
    minValue
  ]);
  let onChange = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChange);
  let onChangeEnd = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChangeEnd);
  const [values, setValuesState] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(value, defaultValue, onChange);
  const [isDraggings, setDraggingsState] = (0, import_react24.useState)(new Array(values.length).fill(false));
  const isEditablesRef = (0, import_react24.useRef)(new Array(values.length).fill(true));
  const [focusedIndex, setFocusedIndex] = (0, import_react24.useState)(void 0);
  const valuesRef = (0, import_react24.useRef)(values);
  const isDraggingsRef = (0, import_react24.useRef)(isDraggings);
  let setValues = (values2) => {
    valuesRef.current = values2;
    setValuesState(values2);
  };
  let setDraggings = (draggings) => {
    isDraggingsRef.current = draggings;
    setDraggingsState(draggings);
  };
  function getValuePercent(value2) {
    return (value2 - minValue) / (maxValue - minValue);
  }
  function getThumbMinValue(index) {
    return index === 0 ? minValue : values[index - 1];
  }
  function getThumbMaxValue(index) {
    return index === values.length - 1 ? maxValue : values[index + 1];
  }
  function isThumbEditable(index) {
    return isEditablesRef.current[index];
  }
  function setThumbEditable(index, editable) {
    isEditablesRef.current[index] = editable;
  }
  function updateValue(index, value2) {
    if (isDisabled || !isThumbEditable(index))
      return;
    const thisMin = getThumbMinValue(index);
    const thisMax = getThumbMaxValue(index);
    value2 = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(value2, thisMin, thisMax, step);
    let newValues = $28f99e3e86e6ec45$var$replaceIndex(valuesRef.current, index, value2);
    setValues(newValues);
  }
  function updateDragging(index, dragging) {
    if (isDisabled || !isThumbEditable(index))
      return;
    if (dragging)
      valuesRef.current = values;
    const wasDragging = isDraggingsRef.current[index];
    isDraggingsRef.current = $28f99e3e86e6ec45$var$replaceIndex(isDraggingsRef.current, index, dragging);
    setDraggings(isDraggingsRef.current);
    if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean))
      onChangeEnd(valuesRef.current);
  }
  function getFormattedValue(value2) {
    return formatter.format(value2);
  }
  function setThumbPercent(index, percent) {
    updateValue(index, getPercentValue(percent));
  }
  function getRoundedValue(value2) {
    return Math.round((value2 - minValue) / step) * step + minValue;
  }
  function getPercentValue(percent) {
    const val = percent * (maxValue - minValue) + minValue;
    return (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(getRoundedValue(val), minValue, maxValue);
  }
  function incrementThumb(index, stepSize = 1) {
    let s = Math.max(stepSize, step);
    updateValue(index, (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(values[index] + s, minValue, maxValue, step));
  }
  function decrementThumb(index, stepSize = 1) {
    let s = Math.max(stepSize, step);
    updateValue(index, (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(values[index] - s, minValue, maxValue, step));
  }
  return {
    values,
    getThumbValue: (index) => values[index],
    setThumbValue: updateValue,
    setThumbPercent,
    isThumbDragging: (index) => isDraggings[index],
    setThumbDragging: updateDragging,
    focusedThumb: focusedIndex,
    setFocusedThumb: setFocusedIndex,
    getThumbPercent: (index) => getValuePercent(values[index]),
    getValuePercent,
    getThumbValueLabel: (index) => getFormattedValue(values[index]),
    getFormattedValue,
    getThumbMinValue,
    getThumbMaxValue,
    getPercentValue,
    isThumbEditable,
    setThumbEditable,
    incrementThumb,
    decrementThumb,
    step,
    pageSize,
    orientation,
    isDisabled
  };
}
function $28f99e3e86e6ec45$var$replaceIndex(array, index, value) {
  if (array[index] === value)
    return array;
  return [
    ...array.slice(0, index),
    value,
    ...array.slice(index + 1)
  ];
}
function $28f99e3e86e6ec45$var$convertValue(value) {
  if (value == null)
    return void 0;
  return Array.isArray(value) ? value : [
    value
  ];
}
function $28f99e3e86e6ec45$var$createOnChange(value, defaultValue, onChange) {
  return (newValue) => {
    if (typeof value === "number" || typeof defaultValue === "number")
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue[0]);
    else
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
  };
}

// node_modules/@react-stately/table/dist/TableUtils.mjs
function $6818b1c4fc67028d$export$1994a077b98ee0d5(width) {
  return width != null && (!isNaN(width) || String(width).match(/^(\d+)(?=%$)/) !== null);
}
function $6818b1c4fc67028d$export$9078bad4c3934604(width) {
  if (!width)
    return 1;
  let match = width.match(/^(.+)(?=fr$)/);
  if (!match) {
    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`, "defaulting to '1fr'");
    return 1;
  }
  return parseFloat(match[0]);
}
function $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, tableWidth) {
  if (typeof width === "string") {
    let match = width.match(/^(\d+)(?=%$)/);
    if (!match)
      throw new Error("Only percentages or numbers are supported for static column widths");
    return tableWidth * (parseFloat(match[0]) / 100);
  }
  return width;
}
function $6818b1c4fc67028d$export$59185c62a7544aa0(maxWidth, tableWidth) {
  return maxWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;
}
function $6818b1c4fc67028d$export$f556054ce4358701(minWidth, tableWidth) {
  return minWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(minWidth, tableWidth) : 0;
}
function $6818b1c4fc67028d$export$55d50dc687385491(availableWidth, columns, changedColumns, getDefaultWidth, getDefaultMinWidth) {
  let hasNonFrozenItems = false;
  let flexItems = columns.map((column, index) => {
    var _column_width, _ref, _ref1;
    let width = changedColumns.get(column.key) != null ? changedColumns.get(column.key) : (_ref1 = (_ref = (_column_width = column.width) !== null && _column_width !== void 0 ? _column_width : column.defaultWidth) !== null && _ref !== void 0 ? _ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(index)) !== null && _ref1 !== void 0 ? _ref1 : "1fr";
    let frozen = false;
    let baseSize = 0;
    let flex = 0;
    let targetMainSize = null;
    if ($6818b1c4fc67028d$export$1994a077b98ee0d5(width)) {
      baseSize = $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, availableWidth);
      frozen = true;
    } else {
      flex = $6818b1c4fc67028d$export$9078bad4c3934604(width);
      if (flex <= 0)
        frozen = true;
    }
    var _column_minWidth, _ref2;
    let min = $6818b1c4fc67028d$export$f556054ce4358701((_ref2 = (_column_minWidth = column.minWidth) !== null && _column_minWidth !== void 0 ? _column_minWidth : getDefaultMinWidth === null || getDefaultMinWidth === void 0 ? void 0 : getDefaultMinWidth(index)) !== null && _ref2 !== void 0 ? _ref2 : 0, availableWidth);
    let max = $6818b1c4fc67028d$export$59185c62a7544aa0(column.maxWidth, availableWidth);
    let hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));
    if (frozen)
      targetMainSize = hypotheticalMainSize;
    else if (baseSize > hypotheticalMainSize) {
      frozen = true;
      targetMainSize = hypotheticalMainSize;
    }
    if (!frozen)
      hasNonFrozenItems = true;
    return {
      frozen,
      baseSize,
      hypotheticalMainSize,
      min,
      max,
      flex,
      targetMainSize,
      violation: 0
    };
  });
  while (hasNonFrozenItems) {
    let usedWidth = 0;
    let flexFactors = 0;
    flexItems.forEach((item) => {
      if (item.frozen)
        usedWidth += item.targetMainSize;
      else {
        usedWidth += item.baseSize;
        flexFactors += item.flex;
      }
    });
    let remainingFreeSpace = availableWidth - usedWidth;
    if (remainingFreeSpace > 0)
      flexItems.forEach((item) => {
        if (!item.frozen) {
          let ratio = item.flex / flexFactors;
          item.targetMainSize = item.baseSize + ratio * remainingFreeSpace;
        }
      });
    let totalViolation = 0;
    flexItems.forEach((item) => {
      item.violation = 0;
      if (!item.frozen) {
        let { min, max, targetMainSize } = item;
        item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));
        item.violation = item.targetMainSize - targetMainSize;
        totalViolation += item.violation;
      }
    });
    hasNonFrozenItems = false;
    flexItems.forEach((item) => {
      if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation))
        item.frozen = true;
      else if (!item.frozen)
        hasNonFrozenItems = true;
    });
  }
  return $6818b1c4fc67028d$var$cascadeRounding(flexItems);
}
function $6818b1c4fc67028d$var$cascadeRounding(flexItems) {
  let fpTotal = 0;
  let intTotal = 0;
  let roundedArray = [];
  flexItems.forEach(function(item) {
    let float = item.targetMainSize;
    let integer = Math.round(float + fpTotal) - intTotal;
    fpTotal += float;
    intTotal += integer;
    roundedArray.push(integer);
  });
  return roundedArray;
}

// node_modules/@react-stately/table/dist/TableColumnLayout.mjs
var $a9e7ae544a4e41dd$export$7ff77a162970b30e = class {
  /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */
  splitColumnsIntoControlledAndUncontrolled(columns) {
    return columns.reduce((acc, col) => {
      if (col.props.width != null)
        acc[0].set(col.key, col);
      else
        acc[1].set(col.key, col);
      return acc;
    }, [
      /* @__PURE__ */ new Map(),
      /* @__PURE__ */ new Map()
    ]);
  }
  /** Takes uncontrolled and controlled widths and joins them into a single Map. */
  recombineColumns(columns, uncontrolledWidths, uncontrolledColumns, controlledColumns) {
    return new Map(columns.map((col) => {
      if (uncontrolledColumns.has(col.key))
        return [
          col.key,
          uncontrolledWidths.get(col.key)
        ];
      else
        return [
          col.key,
          controlledColumns.get(col.key).props.width
        ];
    }));
  }
  /** Used to make an initial Map of the uncontrolled widths based on default widths. */
  getInitialUncontrolledWidths(uncontrolledColumns) {
    return new Map(Array.from(uncontrolledColumns).map(([key, col]) => {
      var _this_getDefaultWidth, _this;
      var _col_props_defaultWidth, _ref;
      return [
        key,
        (_ref = (_col_props_defaultWidth = col.props.defaultWidth) !== null && _col_props_defaultWidth !== void 0 ? _col_props_defaultWidth : (_this_getDefaultWidth = (_this = this).getDefaultWidth) === null || _this_getDefaultWidth === void 0 ? void 0 : _this_getDefaultWidth.call(_this, col)) !== null && _ref !== void 0 ? _ref : "1fr"
      ];
    }));
  }
  getColumnWidth(key) {
    var _this_columnWidths_get;
    return (_this_columnWidths_get = this.columnWidths.get(key)) !== null && _this_columnWidths_get !== void 0 ? _this_columnWidths_get : 0;
  }
  getColumnMinWidth(key) {
    var _this_columnMinWidths_get;
    return (_this_columnMinWidths_get = this.columnMinWidths.get(key)) !== null && _this_columnMinWidths_get !== void 0 ? _this_columnMinWidths_get : 0;
  }
  getColumnMaxWidth(key) {
    var _this_columnMaxWidths_get;
    return (_this_columnMaxWidths_get = this.columnMaxWidths.get(key)) !== null && _this_columnMaxWidths_get !== void 0 ? _this_columnMaxWidths_get : 0;
  }
  resizeColumnWidth(tableWidth, collection, controlledWidths, uncontrolledWidths, col = null, width) {
    let prevColumnWidths = this.columnWidths;
    let resizeIndex = Infinity;
    let resizingChanged = new Map([
      ...controlledWidths,
      ...uncontrolledWidths
    ]);
    let percentKeys = /* @__PURE__ */ new Map();
    let frKeysToTheRight = /* @__PURE__ */ new Map();
    let minWidths = /* @__PURE__ */ new Map();
    collection.columns.forEach((column, i) => {
      var _column_props_width_endsWith, _column_props_width;
      let frKey;
      let frValue;
      minWidths.set(column.key, this.getDefaultMinWidth(collection.columns[i]));
      if (col !== column.key && !column.props.width && !(0, $6818b1c4fc67028d$export$1994a077b98ee0d5)(uncontrolledWidths.get(column.key))) {
        frKey = column.key;
        frValue = (0, $6818b1c4fc67028d$export$9078bad4c3934604)(uncontrolledWidths.get(column.key));
      } else if (col !== column.key && !(0, $6818b1c4fc67028d$export$1994a077b98ee0d5)(column.props.width) && !uncontrolledWidths.get(column.key)) {
        frKey = column.key;
        frValue = (0, $6818b1c4fc67028d$export$9078bad4c3934604)(column.props.width);
      } else if (col !== column.key && ((_column_props_width = column.props.width) === null || _column_props_width === void 0 ? void 0 : (_column_props_width_endsWith = _column_props_width.endsWith) === null || _column_props_width_endsWith === void 0 ? void 0 : _column_props_width_endsWith.call(_column_props_width, "%")))
        percentKeys.set(column.key, column.props.width);
      if (resizeIndex < i) {
        if (frKey)
          frKeysToTheRight.set(frKey, frValue);
        return;
      }
      if (column.key === col) {
        resizeIndex = i;
        resizingChanged.set(column.key, Math.floor(width));
        return;
      }
      resizingChanged.set(column.key, prevColumnWidths.get(column.key));
    });
    let columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map((col2) => ({
      ...col2.props,
      key: col2.key
    })), resizingChanged, (i) => this.getDefaultWidth(collection.columns[i]), (i) => this.getDefaultMinWidth(collection.columns[i]));
    let newWidths = /* @__PURE__ */ new Map();
    columnWidths.forEach((width2, index) => {
      let key = collection.columns[index].key;
      newWidths.set(key, width2);
    });
    Array.from(frKeysToTheRight).forEach(([key]) => {
      newWidths.set(key, `${frKeysToTheRight.get(key)}fr`);
    });
    Array.from(percentKeys).forEach(([key, width2]) => {
      if (key === col)
        return;
      newWidths.set(key, width2);
    });
    return newWidths;
  }
  buildColumnWidths(tableWidth, collection, widths) {
    this.columnWidths = /* @__PURE__ */ new Map();
    this.columnMinWidths = /* @__PURE__ */ new Map();
    this.columnMaxWidths = /* @__PURE__ */ new Map();
    let columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map((col) => ({
      ...col.props,
      key: col.key
    })), widths, (i) => this.getDefaultWidth(collection.columns[i]), (i) => this.getDefaultMinWidth(collection.columns[i]));
    columnWidths.forEach((width, index) => {
      let key = collection.columns[index].key;
      let column = collection.columns[index];
      this.columnWidths.set(key, width);
      var _column_props_minWidth;
      this.columnMinWidths.set(key, (0, $6818b1c4fc67028d$export$f556054ce4358701)((_column_props_minWidth = column.props.minWidth) !== null && _column_props_minWidth !== void 0 ? _column_props_minWidth : this.getDefaultMinWidth(column), tableWidth));
      this.columnMaxWidths.set(key, (0, $6818b1c4fc67028d$export$59185c62a7544aa0)(column.props.maxWidth, tableWidth));
    });
    return this.columnWidths;
  }
  constructor(options) {
    this.columnWidths = /* @__PURE__ */ new Map();
    this.columnMinWidths = /* @__PURE__ */ new Map();
    this.columnMaxWidths = /* @__PURE__ */ new Map();
    var _options_getDefaultWidth;
    this.getDefaultWidth = (_options_getDefaultWidth = options === null || options === void 0 ? void 0 : options.getDefaultWidth) !== null && _options_getDefaultWidth !== void 0 ? _options_getDefaultWidth : () => "1fr";
    var _options_getDefaultMinWidth;
    this.getDefaultMinWidth = (_options_getDefaultMinWidth = options === null || options === void 0 ? void 0 : options.getDefaultMinWidth) !== null && _options_getDefaultMinWidth !== void 0 ? _options_getDefaultMinWidth : () => 75;
  }
};

// node_modules/@react-stately/table/dist/useTableColumnResizeState.mjs
var import_react25 = __toESM(require_react(), 1);
function $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {
  let { getDefaultWidth, getDefaultMinWidth, tableWidth = 0 } = props;
  let [resizingColumn, setResizingColumn] = (0, import_react25.useState)(null);
  let columnLayout = (0, import_react25.useMemo)(() => new (0, $a9e7ae544a4e41dd$export$7ff77a162970b30e)({
    getDefaultWidth,
    getDefaultMinWidth
  }), [
    getDefaultWidth,
    getDefaultMinWidth
  ]);
  let [controlledColumns, uncontrolledColumns] = (0, import_react25.useMemo)(() => columnLayout.splitColumnsIntoControlledAndUncontrolled(state.collection.columns), [
    state.collection.columns,
    columnLayout
  ]);
  let [uncontrolledWidths, setUncontrolledWidths] = (0, import_react25.useState)(() => columnLayout.getInitialUncontrolledWidths(uncontrolledColumns));
  let [lastColumns, setLastColumns] = (0, import_react25.useState)(state.collection.columns);
  if (state.collection.columns !== lastColumns) {
    if (state.collection.columns.length !== lastColumns.length || state.collection.columns.some((c, i) => c.key !== lastColumns[i].key)) {
      let newUncontrolledWidths = columnLayout.getInitialUncontrolledWidths(uncontrolledColumns);
      setUncontrolledWidths(newUncontrolledWidths);
    }
    setLastColumns(state.collection.columns);
  }
  let colWidths = (0, import_react25.useMemo)(() => columnLayout.recombineColumns(state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns), [
    state.collection.columns,
    uncontrolledWidths,
    uncontrolledColumns,
    controlledColumns,
    columnLayout
  ]);
  let startResize = (0, import_react25.useCallback)((key) => {
    setResizingColumn(key);
  }, [
    setResizingColumn
  ]);
  let updateResizedColumns = (0, import_react25.useCallback)((key, width) => {
    let newControlled = new Map(Array.from(controlledColumns).map(([key2, entry]) => [
      key2,
      entry.props.width
    ]));
    let newSizes = columnLayout.resizeColumnWidth(tableWidth, state.collection, newControlled, uncontrolledWidths, key, width);
    let map = new Map(Array.from(uncontrolledColumns).map(([key2]) => [
      key2,
      newSizes.get(key2)
    ]));
    map.set(key, width);
    setUncontrolledWidths(map);
    return newSizes;
  }, [
    controlledColumns,
    uncontrolledColumns,
    setUncontrolledWidths,
    tableWidth,
    columnLayout,
    state.collection,
    uncontrolledWidths
  ]);
  let endResize = (0, import_react25.useCallback)(() => {
    setResizingColumn(null);
  }, [
    setResizingColumn
  ]);
  (0, import_react25.useMemo)(() => columnLayout.buildColumnWidths(tableWidth, state.collection, colWidths), [
    tableWidth,
    state.collection,
    colWidths,
    columnLayout
  ]);
  return (0, import_react25.useMemo)(() => ({
    resizingColumn,
    updateResizedColumns,
    startResize,
    endResize,
    getColumnWidth: (key) => columnLayout.getColumnWidth(key),
    getColumnMinWidth: (key) => columnLayout.getColumnMinWidth(key),
    getColumnMaxWidth: (key) => columnLayout.getColumnMaxWidth(key),
    tableState: state
  }), [
    columnLayout,
    resizingColumn,
    updateResizedColumns,
    startResize,
    endResize,
    state
  ]);
}

// node_modules/@react-stately/grid/dist/useGridState.mjs
var import_react26 = __toESM(require_react(), 1);
function $62967d126f3aa823$export$4007ac09ff9c68ed(props) {
  let { collection, focusMode } = props;
  let selectionState = (0, $7af3f5b51489e0b5$export$253fe78d46329472)(props);
  let disabledKeys = (0, import_react26.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(), [
    props.disabledKeys
  ]);
  let setFocusedKey = selectionState.setFocusedKey;
  selectionState.setFocusedKey = (key, child) => {
    if (focusMode === "cell" && key != null) {
      let item = collection.getItem(key);
      if ((item === null || item === void 0 ? void 0 : item.type) === "item") {
        var _getLastItem, _getFirstItem;
        let children = (0, $c5a24bc478652b5f$export$1005530eda016c13)(item, collection);
        if (child === "last")
          key = (_getLastItem = (0, $c5a24bc478652b5f$export$7475b2c64539e4cf)(children)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;
        else
          key = (_getFirstItem = (0, $c5a24bc478652b5f$export$fbdeaa6a76694f71)(children)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;
      }
    }
    setFocusedKey(key, child);
  };
  let selectionManager = (0, import_react26.useMemo)(() => new (0, $d496c0a20b6e58ec$export$6c8a5aaad13c9852)(collection, selectionState), [
    collection,
    selectionState
  ]);
  const cachedCollection = (0, import_react26.useRef)(null);
  (0, import_react26.useEffect)(() => {
    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {
      const node = cachedCollection.current.getItem(selectionState.focusedKey);
      const parentNode = node.parentKey != null && (node.type === "cell" || node.type === "rowheader" || node.type === "column") ? cachedCollection.current.getItem(node.parentKey) : node;
      const cachedRows = cachedCollection.current.rows;
      const rows = collection.rows;
      const diff = cachedRows.length - rows.length;
      let index = Math.min(diff > 1 ? Math.max(parentNode.index - diff + 1, 0) : parentNode.index, rows.length - 1);
      let newRow;
      while (index >= 0) {
        if (!selectionManager.isDisabled(rows[index].key) && rows[index].type !== "headerrow") {
          newRow = rows[index];
          break;
        }
        if (index < rows.length - 1)
          index++;
        else {
          if (index > parentNode.index)
            index = parentNode.index;
          index--;
        }
      }
      if (newRow) {
        const childNodes = newRow.hasChildNodes ? [
          ...(0, $c5a24bc478652b5f$export$1005530eda016c13)(newRow, collection)
        ] : [];
        const keyToFocus = newRow.hasChildNodes && parentNode !== node && node.index < childNodes.length ? childNodes[node.index].key : newRow.key;
        selectionState.setFocusedKey(keyToFocus);
      } else
        selectionState.setFocusedKey(null);
    }
    cachedCollection.current = collection;
  }, [
    collection,
    selectionManager,
    selectionState,
    selectionState.focusedKey
  ]);
  return {
    collection,
    disabledKeys,
    isKeyboardNavigationDisabled: false,
    selectionManager
  };
}

// node_modules/@react-stately/grid/dist/GridCollection.mjs
var $16805b1b18093c5f$export$de3fdf6493c353d = class {
  *[Symbol.iterator]() {
    yield* [
      ...this.rows
    ];
  }
  get size() {
    return [
      ...this.rows
    ].length;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    var _;
    return (_ = [
      ...this.rows
    ][0]) === null || _ === void 0 ? void 0 : _.key;
  }
  getLastKey() {
    var _rows_;
    let rows = [
      ...this.rows
    ];
    return (_rows_ = rows[rows.length - 1]) === null || _rows_ === void 0 ? void 0 : _rows_.key;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [
      ...this.getKeys()
    ];
    return this.getItem(keys[idx]);
  }
  getChildren(key) {
    let node = this.keyMap.get(key);
    return (node === null || node === void 0 ? void 0 : node.childNodes) || [];
  }
  constructor(opts) {
    this.keyMap = /* @__PURE__ */ new Map();
    this.keyMap = /* @__PURE__ */ new Map();
    this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;
    this.rows = [];
    let visit = (node) => {
      let prevNode = this.keyMap.get(node.key);
      if (opts.visitNode)
        node = opts.visitNode(node);
      this.keyMap.set(node.key, node);
      let childKeys = /* @__PURE__ */ new Set();
      let last2;
      for (let child of node.childNodes) {
        if (child.type === "cell" && child.parentKey == null)
          child.parentKey = node.key;
        childKeys.add(child.key);
        if (last2) {
          last2.nextKey = child.key;
          child.prevKey = last2.key;
        } else
          child.prevKey = null;
        visit(child);
        last2 = child;
      }
      if (last2)
        last2.nextKey = null;
      if (prevNode) {
        for (let child of prevNode.childNodes)
          if (!childKeys.has(child.key))
            remove(child);
      }
    };
    let remove = (node) => {
      this.keyMap.delete(node.key);
      for (let child of node.childNodes)
        if (this.keyMap.get(child.key) === child)
          remove(child);
    };
    let last;
    opts.items.forEach((node, i) => {
      let rowNode = {
        level: 0,
        key: "row-" + i,
        type: "row",
        value: void 0,
        hasChildNodes: true,
        childNodes: [
          ...node.childNodes
        ],
        rendered: void 0,
        textValue: void 0,
        ...node
      };
      if (last) {
        last.nextKey = rowNode.key;
        rowNode.prevKey = last.key;
      } else
        rowNode.prevKey = null;
      this.rows.push(rowNode);
      visit(rowNode);
      last = rowNode;
    });
    if (last)
      last.nextKey = null;
  }
};

// node_modules/@react-stately/table/dist/TableCollection.mjs
var $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = "row-header-column-" + Math.random().toString(36).slice(2);
var $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = "row-header-column-" + Math.random().toString(36).slice(2);
while ($788781baa30117fa$var$ROW_HEADER_COLUMN_KEY === $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG)
  $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = "row-header-column-" + Math.random().toString(36).slice(2);
function $788781baa30117fa$export$7c127db850d4e81e(keyMap, columnNodes) {
  if (columnNodes.length === 0)
    return [];
  let columns = [];
  let seen = /* @__PURE__ */ new Map();
  for (let column of columnNodes) {
    let parentKey = column.parentKey;
    let col = [
      column
    ];
    while (parentKey) {
      let parent = keyMap.get(parentKey);
      if (!parent)
        break;
      if (seen.has(parent)) {
        parent.colspan++;
        let { column: column2, index } = seen.get(parent);
        if (index > col.length)
          break;
        for (let i2 = index; i2 < col.length; i2++)
          column2.splice(i2, 0, null);
        for (let i2 = col.length; i2 < column2.length; i2++)
          if (column2[i2] && seen.has(column2[i2]))
            seen.get(column2[i2]).index = i2;
      } else {
        parent.colspan = 1;
        col.push(parent);
        seen.set(parent, {
          column: col,
          index: col.length - 1
        });
      }
      parentKey = parent.parentKey;
    }
    columns.push(col);
    column.index = columns.length - 1;
  }
  let maxLength = Math.max(...columns.map((c) => c.length));
  let headerRows = Array(maxLength).fill(0).map(() => []);
  let colIndex = 0;
  for (let column of columns) {
    let i2 = maxLength - 1;
    for (let item of column) {
      if (item) {
        let row = headerRows[i2];
        let rowLength = row.reduce((p, c) => p + c.colspan, 0);
        if (rowLength < colIndex) {
          let placeholder = {
            type: "placeholder",
            key: "placeholder-" + item.key,
            colspan: colIndex - rowLength,
            index: rowLength,
            value: null,
            rendered: null,
            level: i2,
            hasChildNodes: false,
            childNodes: [],
            textValue: null
          };
          if (row.length > 0) {
            row[row.length - 1].nextKey = placeholder.key;
            placeholder.prevKey = row[row.length - 1].key;
          }
          row.push(placeholder);
        }
        if (row.length > 0) {
          row[row.length - 1].nextKey = item.key;
          item.prevKey = row[row.length - 1].key;
        }
        item.level = i2;
        item.colIndex = colIndex;
        row.push(item);
      }
      i2--;
    }
    colIndex++;
  }
  let i = 0;
  for (let row of headerRows) {
    let rowLength = row.reduce((p, c) => p + c.colspan, 0);
    if (rowLength < columnNodes.length) {
      let placeholder = {
        type: "placeholder",
        key: "placeholder-" + row[row.length - 1].key,
        colspan: columnNodes.length - rowLength,
        index: rowLength,
        value: null,
        rendered: null,
        level: i,
        hasChildNodes: false,
        childNodes: [],
        textValue: null,
        prevKey: row[row.length - 1].key
      };
      row.push(placeholder);
    }
    i++;
  }
  return headerRows.map((childNodes, index) => {
    let row = {
      type: "headerrow",
      key: "headerrow-" + index,
      index,
      value: null,
      rendered: null,
      level: 0,
      hasChildNodes: true,
      childNodes,
      textValue: null
    };
    return row;
  });
}
var $788781baa30117fa$export$596e1b2e2cf93690 = class extends (0, $16805b1b18093c5f$export$de3fdf6493c353d) {
  *[Symbol.iterator]() {
    yield* this.body.childNodes;
  }
  get size() {
    return this._size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    var _getFirstItem;
    return (_getFirstItem = (0, $c5a24bc478652b5f$export$fbdeaa6a76694f71)(this.body.childNodes)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;
  }
  getLastKey() {
    var _getLastItem;
    return (_getLastItem = (0, $c5a24bc478652b5f$export$7475b2c64539e4cf)(this.body.childNodes)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [
      ...this.getKeys()
    ];
    return this.getItem(keys[idx]);
  }
  getTextValue(key) {
    let row = this.getItem(key);
    if (!row)
      return "";
    if (row.textValue)
      return row.textValue;
    let rowHeaderColumnKeys = this.rowHeaderColumnKeys;
    if (rowHeaderColumnKeys) {
      let text = [];
      for (let cell of row.childNodes) {
        let column = this.columns[cell.index];
        if (rowHeaderColumnKeys.has(column.key) && cell.textValue)
          text.push(cell.textValue);
        if (text.length === rowHeaderColumnKeys.size)
          break;
      }
      return text.join(" ");
    }
    return "";
  }
  constructor(nodes, prev, opts) {
    let rowHeaderColumnKeys = /* @__PURE__ */ new Set();
    let body;
    let columns = [];
    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {
      let rowHeaderColumn = {
        type: "column",
        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,
        value: null,
        textValue: "",
        level: 0,
        index: (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) ? 1 : 0,
        hasChildNodes: false,
        rendered: null,
        childNodes: [],
        props: {
          isSelectionCell: true
        }
      };
      columns.unshift(rowHeaderColumn);
    }
    if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) {
      let rowHeaderColumn = {
        type: "column",
        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG,
        value: null,
        textValue: "",
        level: 0,
        index: 0,
        hasChildNodes: false,
        rendered: null,
        childNodes: [],
        props: {
          isDragButtonCell: true
        }
      };
      columns.unshift(rowHeaderColumn);
    }
    let rows = [];
    let columnKeyMap = /* @__PURE__ */ new Map();
    let visit = (node) => {
      switch (node.type) {
        case "body":
          body = node;
          break;
        case "column":
          columnKeyMap.set(node.key, node);
          if (!node.hasChildNodes) {
            columns.push(node);
            if (node.props.isRowHeader)
              rowHeaderColumnKeys.add(node.key);
          }
          break;
        case "item":
          rows.push(node);
          return;
      }
      for (let child of node.childNodes)
        visit(child);
    };
    for (let node of nodes)
      visit(node);
    let headerRows = $788781baa30117fa$export$7c127db850d4e81e(columnKeyMap, columns);
    headerRows.forEach((row, i) => rows.splice(i, 0, row));
    super({
      columnCount: columns.length,
      items: rows,
      visitNode: (node) => {
        node.column = columns[node.index];
        return node;
      }
    });
    this._size = 0;
    this.columns = columns;
    this.rowHeaderColumnKeys = rowHeaderColumnKeys;
    this.body = body;
    this.headerRows = headerRows;
    this._size = [
      ...body.childNodes
    ].length;
    if (this.rowHeaderColumnKeys.size === 0)
      this.rowHeaderColumnKeys.add(this.columns.find((column) => {
        var _column_props, _column_props1;
        return !((_column_props = column.props) === null || _column_props === void 0 ? void 0 : _column_props.isDragButtonCell) && !((_column_props1 = column.props) === null || _column_props1 === void 0 ? void 0 : _column_props1.isSelectionCell);
      }).key);
  }
};

// node_modules/@react-stately/table/dist/useTableState.mjs
var import_react27 = __toESM(require_react(), 1);
var $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {
  ascending: "descending",
  descending: "ascending"
};
function $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {
  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = (0, import_react27.useState)(false);
  let { selectionMode = "none", showSelectionCheckboxes, showDragButtons } = props;
  let context = (0, import_react27.useMemo)(() => ({
    showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== "none",
    showDragButtons,
    selectionMode,
    columns: []
  }), [
    props.children,
    showSelectionCheckboxes,
    selectionMode,
    showDragButtons
  ]);
  let collection = (0, $7613b1592d41b092$export$6cd28814d92fa9c9)(props, (0, import_react27.useCallback)((nodes) => new (0, $788781baa30117fa$export$596e1b2e2cf93690)(nodes, null, context), [
    context
  ]), context);
  let { disabledKeys, selectionManager } = (0, $62967d126f3aa823$export$4007ac09ff9c68ed)({
    ...props,
    collection,
    disabledBehavior: props.disabledBehavior || "selection"
  });
  return {
    collection,
    disabledKeys,
    selectionManager,
    showSelectionCheckboxes: props.showSelectionCheckboxes || false,
    sortDescriptor: props.sortDescriptor,
    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,
    setKeyboardNavigationDisabled,
    sort(columnKey, direction) {
      var _props_sortDescriptor;
      props.onSortChange({
        column: columnKey,
        direction: direction !== null && direction !== void 0 ? direction : ((_props_sortDescriptor = props.sortDescriptor) === null || _props_sortDescriptor === void 0 ? void 0 : _props_sortDescriptor.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : "ascending"
      });
    }
  };
}

// node_modules/@react-stately/table/dist/TableHeader.mjs
var import_react28 = __toESM(require_react(), 1);
function $312ae3b56a94a86e$var$TableHeader(props) {
  return null;
}
$312ae3b56a94a86e$var$TableHeader.getCollectionNode = function* getCollectionNode(props, context) {
  let { children, columns } = props;
  context.columns = [];
  if (typeof children === "function") {
    if (!columns)
      throw new Error("props.children was a function but props.columns is missing");
    for (let column of columns)
      yield {
        type: "column",
        value: column,
        renderer: children
      };
  } else {
    let columns2 = [];
    (0, import_react28.default).Children.forEach(children, (column) => {
      columns2.push({
        type: "column",
        element: column
      });
    });
    yield* columns2;
  }
};
var $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;

// node_modules/@react-stately/table/dist/TableBody.mjs
var import_react29 = __toESM(require_react(), 1);
function $4ae5314bf50db1a3$var$TableBody(props) {
  return null;
}
$4ae5314bf50db1a3$var$TableBody.getCollectionNode = function* getCollectionNode2(props) {
  let { children, items } = props;
  yield {
    type: "body",
    hasChildNodes: true,
    props,
    *childNodes() {
      if (typeof children === "function") {
        if (!items)
          throw new Error("props.children was a function but props.items is missing");
        for (let item of items)
          yield {
            type: "item",
            value: item,
            renderer: children
          };
      } else {
        let items2 = [];
        (0, import_react29.default).Children.forEach(children, (item) => {
          items2.push({
            type: "item",
            element: item
          });
        });
        yield* items2;
      }
    }
  };
};
var $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;

// node_modules/@react-stately/table/dist/Column.mjs
var import_react30 = __toESM(require_react(), 1);
function $1cd244557c2f97d5$var$Column(props) {
  return null;
}
$1cd244557c2f97d5$var$Column.getCollectionNode = function* getCollectionNode3(props, context) {
  let { title, children, childColumns } = props;
  let rendered = title || children;
  let textValue = props.textValue || (typeof rendered === "string" ? rendered : "") || props["aria-label"];
  let fullNodes = yield {
    type: "column",
    hasChildNodes: !!childColumns || title && (0, import_react30.default).Children.count(children) > 0,
    rendered,
    textValue,
    props,
    *childNodes() {
      if (childColumns)
        for (let child of childColumns)
          yield {
            type: "column",
            value: child
          };
      else if (title) {
        let childColumns2 = [];
        (0, import_react30.default).Children.forEach(children, (child) => {
          childColumns2.push({
            type: "column",
            element: child
          });
        });
        yield* childColumns2;
      }
    },
    shouldInvalidate(newContext) {
      updateContext(newContext);
      return false;
    }
  };
  let updateContext = (context2) => {
    for (let node of fullNodes)
      if (!node.hasChildNodes)
        context2.columns.push(node);
  };
  updateContext(context);
};
var $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;

// node_modules/@react-stately/table/dist/Row.mjs
var import_react31 = __toESM(require_react(), 1);
function $70d70eb16ea48428$var$Row(props) {
  return null;
}
$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode4(props, context) {
  let { children, textValue, UNSTABLE_childItems } = props;
  yield {
    type: "item",
    props,
    textValue,
    "aria-label": props["aria-label"],
    hasChildNodes: true,
    *childNodes() {
      if (context.showDragButtons)
        yield {
          type: "cell",
          key: "header-drag",
          props: {
            isDragButtonCell: true
          }
        };
      if (context.showSelectionCheckboxes && context.selectionMode !== "none")
        yield {
          type: "cell",
          key: "header",
          props: {
            isSelectionCell: true
          }
        };
      if (typeof children === "function") {
        for (let column of context.columns)
          yield {
            type: "cell",
            element: children(column.key),
            key: column.key
            // this is combined with the row key by CollectionBuilder
          };
        if (UNSTABLE_childItems)
          for (let child of UNSTABLE_childItems)
            yield {
              type: "item",
              value: child
            };
      } else {
        let cells = [];
        let childRows = [];
        (0, import_react31.default).Children.forEach(children, (node) => {
          if (node.type === $70d70eb16ea48428$var$Row) {
            if (cells.length < context.columns.length)
              throw new Error("All of a Row's child Cells must be positioned before any child Rows.");
            childRows.push({
              type: "item",
              element: node
            });
          } else
            cells.push({
              type: "cell",
              element: node
            });
        });
        if (cells.length !== context.columns.length)
          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);
        yield* cells;
        yield* childRows;
      }
    },
    shouldInvalidate(newContext) {
      return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.showDragButtons !== context.showDragButtons || newContext.selectionMode !== context.selectionMode;
    }
  };
};
var $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;

// node_modules/@react-stately/table/dist/Cell.mjs
function $941d1d9a6a28982a$var$Cell(props) {
  return null;
}
$941d1d9a6a28982a$var$Cell.getCollectionNode = function* getCollectionNode5(props) {
  let { children } = props;
  let textValue = props.textValue || (typeof children === "string" ? children : "") || props["aria-label"] || "";
  yield {
    type: "cell",
    props,
    rendered: children,
    textValue,
    "aria-label": props["aria-label"],
    hasChildNodes: false
  };
};
var $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;

// node_modules/@react-stately/table/dist/useTreeGridState.mjs
var import_react32 = __toESM(require_react(), 1);
function $ee65a0057fd99531$export$34dfa8a1622185a4(props) {
  let { selectionMode = "none", showSelectionCheckboxes, showDragButtons, UNSTABLE_expandedKeys: propExpandedKeys, UNSTABLE_defaultExpandedKeys: propDefaultExpandedKeys, UNSTABLE_onExpandedChange, children } = props;
  if (!(0, $f4e2df6bd15f8569$export$1b00cb14a96194e6)())
    throw new Error("Feature flag for table nested rows must be enabled to use useTreeGridState.");
  let [expandedKeys, setExpandedKeys] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(propExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propExpandedKeys) : void 0, propDefaultExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propDefaultExpandedKeys) : /* @__PURE__ */ new Set(), UNSTABLE_onExpandedChange);
  let context = (0, import_react32.useMemo)(() => ({
    showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== "none",
    showDragButtons,
    selectionMode,
    columns: []
  }), [
    children,
    showSelectionCheckboxes,
    selectionMode,
    showDragButtons
  ]);
  let builder = (0, import_react32.useMemo)(() => new (0, $eb2240fc39a57fa5$export$bf788dd355e3a401)(), []);
  let nodes = (0, import_react32.useMemo)(() => builder.build({
    children
  }, context), [
    builder,
    children,
    context
  ]);
  let treeGridCollection = (0, import_react32.useMemo)(() => {
    return $ee65a0057fd99531$var$generateTreeGridCollection(nodes, {
      showSelectionCheckboxes,
      showDragButtons,
      expandedKeys
    });
  }, [
    nodes,
    showSelectionCheckboxes,
    showDragButtons,
    expandedKeys
  ]);
  let onToggle = (key) => {
    setExpandedKeys($ee65a0057fd99531$var$toggleKey(expandedKeys, key, treeGridCollection));
  };
  let collection = (0, import_react32.useMemo)(() => {
    return new (0, $788781baa30117fa$export$596e1b2e2cf93690)(treeGridCollection.tableNodes, null, context);
  }, [
    context,
    treeGridCollection.tableNodes
  ]);
  let tableState = (0, $4a0dd036d492cee4$export$907bcc6c48325fd6)({
    ...props,
    collection
  });
  return {
    ...tableState,
    keyMap: treeGridCollection.keyMap,
    userColumnCount: treeGridCollection.userColumnCount,
    expandedKeys,
    toggleKey: onToggle
  };
}
function $ee65a0057fd99531$var$toggleKey(currentExpandedKeys, key, collection) {
  let updatedExpandedKeys;
  if (currentExpandedKeys === "all") {
    updatedExpandedKeys = new Set(collection.flattenedRows.filter((row) => row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount).map((row) => row.key));
    updatedExpandedKeys.delete(key);
  } else {
    updatedExpandedKeys = new Set(currentExpandedKeys);
    if (updatedExpandedKeys.has(key))
      updatedExpandedKeys.delete(key);
    else
      updatedExpandedKeys.add(key);
  }
  return updatedExpandedKeys;
}
function $ee65a0057fd99531$var$convertExpanded(expanded) {
  if (!expanded)
    return /* @__PURE__ */ new Set();
  return expanded === "all" ? "all" : new Set(expanded);
}
function $ee65a0057fd99531$var$generateTreeGridCollection(nodes, opts) {
  let { expandedKeys = /* @__PURE__ */ new Set() } = opts;
  let body;
  let flattenedRows = [];
  let columnCount = 0;
  let userColumnCount = 0;
  let originalColumns = [];
  let keyMap = /* @__PURE__ */ new Map();
  if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes)
    columnCount++;
  if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons)
    columnCount++;
  let topLevelRows = [];
  let visit = (node) => {
    switch (node.type) {
      case "body":
        body = node;
        keyMap.set(body.key, body);
        break;
      case "column":
        if (!node.hasChildNodes)
          userColumnCount++;
        break;
      case "item":
        topLevelRows.push(node);
        return;
    }
    for (let child of node.childNodes)
      visit(child);
  };
  for (let node of nodes) {
    if (node.type === "column")
      originalColumns.push(node);
    visit(node);
  }
  columnCount += userColumnCount;
  let globalRowCount = 0;
  let visitNode = (node, i) => {
    if (node.type === "item") {
      let childNodes = [];
      for (let child of node.childNodes)
        if (child.type === "cell") {
          let cellClone = {
            ...child
          };
          if (cellClone.index + 1 === columnCount)
            cellClone.nextKey = null;
          childNodes.push({
            ...cellClone
          });
        }
      let clone = {
        ...node,
        childNodes,
        parentKey: body.key,
        level: 1,
        index: globalRowCount++
      };
      flattenedRows.push(clone);
    }
    let newProps = {};
    if (node.type !== "placeholder" && node.type !== "column")
      newProps["indexOfType"] = i;
    Object.assign(node, newProps);
    keyMap.set(node.key, node);
    let lastNode;
    let rowIndex = 0;
    for (let child of node.childNodes)
      if (!(child.type === "item" && expandedKeys !== "all" && !expandedKeys.has(node.key))) {
        if (child.parentKey == null)
          child.parentKey = node.key;
        if (lastNode) {
          lastNode.nextKey = child.key;
          child.prevKey = lastNode.key;
        } else
          child.prevKey = null;
        if (child.type === "item")
          visitNode(child, rowIndex++);
        else
          visitNode(child, child.index);
        lastNode = child;
      }
    if (lastNode)
      lastNode.nextKey = null;
  };
  let last;
  topLevelRows.forEach((node, i) => {
    visitNode(node, i);
    if (last) {
      last.nextKey = node.key;
      node.prevKey = last.key;
    } else
      node.prevKey = null;
    last = node;
  });
  if (last)
    last.nextKey = null;
  return {
    keyMap,
    userColumnCount,
    flattenedRows,
    tableNodes: [
      ...originalColumns,
      {
        ...body,
        childNodes: flattenedRows
      }
    ]
  };
}

// node_modules/@react-stately/tabs/dist/useTabListState.mjs
var import_react33 = __toESM(require_react(), 1);
function $76f919a04c5a7d14$export$4ba071daf4e486(props) {
  var _props_defaultSelectedKey;
  let state = (0, $a0d645289fe9b86b$export$e7f05e985daf4b5f)({
    ...props,
    suppressTextValueWarning: true,
    defaultSelectedKey: (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : $76f919a04c5a7d14$var$findDefaultSelectedKey(props.collection, props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set())
  });
  let { selectionManager, collection, selectedKey: currentSelectedKey } = state;
  let lastSelectedKey = (0, import_react33.useRef)(currentSelectedKey);
  (0, import_react33.useEffect)(() => {
    let selectedKey = currentSelectedKey;
    if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {
      selectedKey = $76f919a04c5a7d14$var$findDefaultSelectedKey(collection, state.disabledKeys);
      if (selectedKey != null)
        selectionManager.setSelectedKeys([
          selectedKey
        ]);
    }
    if (selectedKey != null && selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current)
      selectionManager.setFocusedKey(selectedKey);
    lastSelectedKey.current = selectedKey;
  });
  return {
    ...state,
    isDisabled: props.isDisabled || false
  };
}
function $76f919a04c5a7d14$var$findDefaultSelectedKey(collection, disabledKeys) {
  let selectedKey = null;
  if (collection) {
    selectedKey = collection.getFirstKey();
    while (disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey())
      selectedKey = collection.getKeyAfter(selectedKey);
    if (disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey())
      selectedKey = collection.getFirstKey();
  }
  return selectedKey;
}

// node_modules/@react-stately/tooltip/dist/useTooltipTriggerState.mjs
var import_react34 = __toESM(require_react(), 1);
var $8796f90736e175cb$var$TOOLTIP_DELAY = 1500;
var $8796f90736e175cb$var$TOOLTIP_COOLDOWN = 500;
var $8796f90736e175cb$var$tooltips = {};
var $8796f90736e175cb$var$tooltipId = 0;
var $8796f90736e175cb$var$globalWarmedUp = false;
var $8796f90736e175cb$var$globalWarmUpTimeout = null;
var $8796f90736e175cb$var$globalCooldownTimeout = null;
function $8796f90736e175cb$export$4d40659c25ecb50b(props = {}) {
  let { delay = $8796f90736e175cb$var$TOOLTIP_DELAY, closeDelay = $8796f90736e175cb$var$TOOLTIP_COOLDOWN } = props;
  let { isOpen, open, close } = (0, $fc909762b330b746$export$61c6a8c84e605fb6)(props);
  let id = (0, import_react34.useMemo)(() => `${++$8796f90736e175cb$var$tooltipId}`, []);
  let closeTimeout = (0, import_react34.useRef)();
  let ensureTooltipEntry = () => {
    $8796f90736e175cb$var$tooltips[id] = hideTooltip;
  };
  let closeOpenTooltips = () => {
    for (let hideTooltipId in $8796f90736e175cb$var$tooltips)
      if (hideTooltipId !== id) {
        $8796f90736e175cb$var$tooltips[hideTooltipId](true);
        delete $8796f90736e175cb$var$tooltips[hideTooltipId];
      }
  };
  let showTooltip = () => {
    clearTimeout(closeTimeout.current);
    closeTimeout.current = null;
    closeOpenTooltips();
    ensureTooltipEntry();
    $8796f90736e175cb$var$globalWarmedUp = true;
    open();
    if ($8796f90736e175cb$var$globalWarmUpTimeout) {
      clearTimeout($8796f90736e175cb$var$globalWarmUpTimeout);
      $8796f90736e175cb$var$globalWarmUpTimeout = null;
    }
    if ($8796f90736e175cb$var$globalCooldownTimeout) {
      clearTimeout($8796f90736e175cb$var$globalCooldownTimeout);
      $8796f90736e175cb$var$globalCooldownTimeout = null;
    }
  };
  let hideTooltip = (immediate) => {
    if (immediate || closeDelay <= 0) {
      clearTimeout(closeTimeout.current);
      closeTimeout.current = null;
      close();
    } else if (!closeTimeout.current)
      closeTimeout.current = setTimeout(() => {
        closeTimeout.current = null;
        close();
      }, closeDelay);
    if ($8796f90736e175cb$var$globalWarmUpTimeout) {
      clearTimeout($8796f90736e175cb$var$globalWarmUpTimeout);
      $8796f90736e175cb$var$globalWarmUpTimeout = null;
    }
    if ($8796f90736e175cb$var$globalWarmedUp) {
      if ($8796f90736e175cb$var$globalCooldownTimeout)
        clearTimeout($8796f90736e175cb$var$globalCooldownTimeout);
      $8796f90736e175cb$var$globalCooldownTimeout = setTimeout(() => {
        delete $8796f90736e175cb$var$tooltips[id];
        $8796f90736e175cb$var$globalCooldownTimeout = null;
        $8796f90736e175cb$var$globalWarmedUp = false;
      }, Math.max($8796f90736e175cb$var$TOOLTIP_COOLDOWN, closeDelay));
    }
  };
  let warmupTooltip = () => {
    closeOpenTooltips();
    ensureTooltipEntry();
    if (!isOpen && !$8796f90736e175cb$var$globalWarmUpTimeout && !$8796f90736e175cb$var$globalWarmedUp)
      $8796f90736e175cb$var$globalWarmUpTimeout = setTimeout(() => {
        $8796f90736e175cb$var$globalWarmUpTimeout = null;
        $8796f90736e175cb$var$globalWarmedUp = true;
        showTooltip();
      }, delay);
    else if (!isOpen)
      showTooltip();
  };
  (0, import_react34.useEffect)(() => {
    return () => {
      clearTimeout(closeTimeout.current);
      let tooltip = $8796f90736e175cb$var$tooltips[id];
      if (tooltip)
        delete $8796f90736e175cb$var$tooltips[id];
    };
  }, [
    id
  ]);
  return {
    isOpen,
    open: (immediate) => {
      if (!immediate && delay > 0 && !closeTimeout.current)
        warmupTooltip();
      else
        showTooltip();
    },
    close: hideTooltip
  };
}

// node_modules/@react-stately/tree/dist/TreeCollection.mjs
var $05ca4cd7c4a5a999$export$863faf230ee2118a = class {
  *[Symbol.iterator]() {
    yield* this.iterable;
  }
  get size() {
    return this.keyMap.size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    return this.firstKey;
  }
  getLastKey() {
    return this.lastKey;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [
      ...this.getKeys()
    ];
    return this.getItem(keys[idx]);
  }
  constructor(nodes, { expandedKeys } = {}) {
    this.keyMap = /* @__PURE__ */ new Map();
    this.iterable = nodes;
    expandedKeys = expandedKeys || /* @__PURE__ */ new Set();
    let visit = (node) => {
      this.keyMap.set(node.key, node);
      if (node.childNodes && (node.type === "section" || expandedKeys.has(node.key)))
        for (let child of node.childNodes)
          visit(child);
    };
    for (let node of nodes)
      visit(node);
    let last;
    let index = 0;
    for (let [key, node] of this.keyMap) {
      if (last) {
        last.nextKey = key;
        node.prevKey = last.key;
      } else {
        this.firstKey = key;
        node.prevKey = void 0;
      }
      if (node.type === "item")
        node.index = index++;
      last = node;
      last.nextKey = void 0;
    }
    this.lastKey = last === null || last === void 0 ? void 0 : last.key;
  }
};

// node_modules/@react-stately/tree/dist/useTreeState.mjs
var import_react35 = __toESM(require_react(), 1);
function $875d6693e12af071$export$728d6ba534403756(props) {
  let { onExpandedChange } = props;
  let [expandedKeys, setExpandedKeys] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.expandedKeys ? new Set(props.expandedKeys) : void 0, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : /* @__PURE__ */ new Set(), onExpandedChange);
  let selectionState = (0, $7af3f5b51489e0b5$export$253fe78d46329472)(props);
  let disabledKeys = (0, import_react35.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(), [
    props.disabledKeys
  ]);
  let tree = (0, $7613b1592d41b092$export$6cd28814d92fa9c9)(props, (0, import_react35.useCallback)((nodes) => new (0, $05ca4cd7c4a5a999$export$863faf230ee2118a)(nodes, {
    expandedKeys
  }), [
    expandedKeys
  ]), null);
  (0, import_react35.useEffect)(() => {
    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey))
      selectionState.setFocusedKey(null);
  }, [
    tree,
    selectionState.focusedKey
  ]);
  let onToggle = (key) => {
    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));
  };
  return {
    collection: tree,
    expandedKeys,
    disabledKeys,
    toggleKey: onToggle,
    setExpandedKeys,
    selectionManager: new (0, $d496c0a20b6e58ec$export$6c8a5aaad13c9852)(tree, selectionState)
  };
}
function $875d6693e12af071$var$toggleKey(set, key) {
  let res = new Set(set);
  if (res.has(key))
    res.delete(key);
  else
    res.add(key);
  return res;
}

export {
  $131cf43a05231e1e$export$6d095e787d2b5e1f,
  $9a36b6ba2fb1a7c5$export$9a987164d97ecc90,
  $587d3ad58be6d31f$export$daff6da51032a415,
  $a02d57049d202695$export$d085fb9e920b5ca7,
  $7af3f5b51489e0b5$export$253fe78d46329472,
  $e72dd72e1c76a225$export$2f645645f7bca764,
  $a0d645289fe9b86b$export$e7f05e985daf4b5f,
  $fc909762b330b746$export$61c6a8c84e605fb6,
  $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e,
  $ab5bf3f618090389$export$87194bb378cc3ac2,
  $3c0fc76039f1c516$export$60e84778edff6d26,
  $93c38a5e28be6249$export$e50a61c1de9f574,
  $eff5d8ee529ac4bb$export$fd53cef0cc796101,
  $b45bbbaf0c3785df$export$29efd034f1d79f81,
  $e672e8bc247525d1$export$926850f6ecef79d0,
  $0d86e9c8f07f9a7b$export$762f73dccccd255d,
  $f86e6c1ec7da6ebb$export$bc3384a35de93d66,
  $be2ea0343af54212$export$d14e1352e21f4a16,
  $a28c903ee9ad8dc5$export$79fefeb1c2091ac3,
  $e5614764aa47eb35$export$cfc51cf86138bf98,
  $de67e98908f0c6ee$export$7f629e9dc1ecf37c,
  $a54cdc5c1942b639$export$bca9d026f8e704eb,
  $0b2218c4e3fe7d7e$export$3f8be18b0f41eaf2,
  $2bc3a590c5373a4e$export$5159ec8b34d4ec12,
  $28f99e3e86e6ec45$export$e5fda3247f5d67f9,
  $a9e7ae544a4e41dd$export$7ff77a162970b30e,
  $292bc4e09cd0eb62$export$cb895dcf85db1319,
  $788781baa30117fa$export$7c127db850d4e81e,
  $4a0dd036d492cee4$export$907bcc6c48325fd6,
  $312ae3b56a94a86e$export$f850895b287ef28e,
  $4ae5314bf50db1a3$export$76ccd210b9029917,
  $1cd244557c2f97d5$export$816b5d811295e6bc,
  $70d70eb16ea48428$export$b59bdbef9ce70de2,
  $941d1d9a6a28982a$export$f6f0c3fe4ec306ea,
  $ee65a0057fd99531$export$34dfa8a1622185a4,
  $76f919a04c5a7d14$export$4ba071daf4e486,
  $8796f90736e175cb$export$4d40659c25ecb50b,
  $875d6693e12af071$export$728d6ba534403756
};
//# sourceMappingURL=chunk-DVSJZY7L.js.map
